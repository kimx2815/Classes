<?xml version="1.0" encoding="UTF-8"?>

<CopperSpec xmlns="http://melt.cs.umn.edu/copper/xmlns">
  <Parser id="edu_umn_cs_melt_ableC_artifacts_ide_basic_theParser" isUnitary="true">
    <PP>edu:umn:cs:melt:ableC:artifacts:ide_basic:theParser</PP>
    <Grammars><GrammarRef id="host"/></Grammars>
    <StartSymbol><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Root" grammar="host" /></StartSymbol>
    <StartLayout><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_BlockComment" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LineComment" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_WhiteSpace" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_cppTags_CPP_Location_Tag_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_PragmaMark" grammar="host" /></StartLayout>
    <ClassAuxiliaryCode>
      <Code><![CDATA[
	//IDE Extension START

	protected AdaptiveEnhancedParseTreeInnerNode createPTNode(final Object obj){
	    int production = semantics.getCurrentProduction();
		nodeBuilder.setLangSpecNode(obj);
		int _productionLength = actionIndex(getSymbolNumbers()[production]);
		int _productionLHS = actionIndex(getProductionLHSs()[production - getGRAMMAR_SYMBOL_COUNT()]);
		enParseTree.reduce(nodeBuilder, production, _productionLength, _productionLHS);
		return (AdaptiveEnhancedParseTreeInnerNode)enParseTree.getLowestNode();
	}
	
	protected void shiftPTNode(final Object obj, SingleDFAMatchData scanResult){
		nodeBuilder.setLangSpecNode(obj);
		enParseTree.shift(nodeBuilder, scanResult, _startOffset, _endOffset);
	}
	
	protected void shiftPTNode(SingleDFAMatchData scanResult){
		shiftPTNode(null, scanResult);
	}
	
	class AdaptiveParseNodeBuilder implements ParseNodeBuilder<IEnhancedParseTreeNode> {
		private Object langSpecNode;
		
		AdaptiveParseNodeBuilder(){

		}
		
		void setLangSpecNode(Object langSpecNode){
			this.langSpecNode = langSpecNode;
		}
		
		@Override
		public AdaptiveEnhancedParseTreeInnerNode<Object> buildNode(
			IEnhancedParseTreeNode[] children, int production, int term) {
			
			int start = 0;
			int end = 0;
			
			if(children != null && children.length>0){
				start = children[0].getStart();
				end = children[children.length-1].getEnd();
			} else if (tokenList != null) {
				//For empty production (RHS = 0), use the last token scanned as the location
				int sz = tokenList.size();
				if(sz>0){
					start = tokenList.get(sz-1).getEndOffset() + 1;
					end = start;
				}
			}
			
			return new AdaptiveEnhancedParseTreeInnerNode<Object>(
					children, production, term, start, end, langSpecNode);
		}

		@Override
		public AdaptiveEnhancedParseTreeLeafNode<Object> buildNode(
			SingleDFAMatchData scanResult, int start, int end) {
			return new AdaptiveEnhancedParseTreeLeafNode<Object>(
				scanResult.lexeme, scanResult.firstTerm, start, end, langSpecNode);
		}
	}
	
	private AdaptiveParseNodeBuilder nodeBuilder = new AdaptiveParseNodeBuilder();
	
	//The following variables are used for building token list
	private int _totalOffset = 0;
	private int _startOffset = 0;
	private int _endOffset = 0;
	protected List<IToken> tokenList = null;
	private final Object LOCK = new Object();

	private void addToken(SingleDFAMatchData _terminal){
		IToken t = createToken(_terminal);
		if(t != null){
			synchronized(LOCK){
				tokenList.add(t);
				if(StaticSymbolNames==null){
					//Initialize symbol names
					String[] names = getSymbolNames();
					StaticSymbolNames = new String[names.length];
					for(int i=0;i<names.length;i++){
						StaticSymbolNames[i] = names[i];
					}
				}
			}
		}  	
	}

	/**
	 * Called at start of parsing
	*/
	public void reset(){
		synchronized(LOCK){
			tokenList = new ArrayList<IToken>();
		}
		_totalOffset = 0;
		_startOffset = 0;
		_endOffset = 0;
		startColumnForNextToken = 1;
		enParseTree.clear();
	}
	
	private int startColumnForNextToken = 1;
	
	private final static String SEPARATOR = System.getProperty("line.separator").toString();
	
    protected IToken createToken(SingleDFAMatchData scanResult) {
    	_startOffset = _totalOffset;
		if(scanResult.lexeme.length()>0){
			_totalOffset += scanResult.lexeme.length();
		}
		_endOffset = _totalOffset;
    	if(_startOffset == _endOffset){
    		return null;
    	}
    	
    	_endOffset--;
		int line =  virtualLocation.getLine();
		int endColumn = virtualLocation.getColumn();
		int startColumn = scanResult.lexeme.startsWith(SEPARATOR) ? 0 : startColumnForNextToken;
		startColumnForNextToken = endColumn + 1;
		int kind = getKind(scanResult);
		
		return new EnhancedCopperToken(
			kind, 
			scanResult.firstTerm, 
			tokenList.size(), 
			_startOffset, 
			_endOffset, 
			line, 
			line, 
			startColumn, 
			endColumn);
	}
	
	class EnhancedCopperToken extends CopperToken {
		private String str;
		
		public EnhancedCopperToken(int kind, int term, int tokenIndex, int startOffset,
				int endOffset, int startLine, int endLine, int startColumn, 
				int endColumn) {
			super(kind, term, tokenIndex, startOffset, endOffset, startLine, endLine, 
				startColumn, endColumn);
		}
		
		public String toString(){
			if(str==null){
				str = "[" + getSymbolNames()[term] + ":" + startLine + "/" + startColumn + "(" + startOffset + "/" + endOffset + ")]";
			}
			
			return str;
		}
	}
	
	public void printTokenList(){
		Iterator<IToken> iter = tokenList.iterator();
		StringBuilder sb = new StringBuilder("TOKEN LIST (" + tokenList.size() + " in total) = ");
		while(iter.hasNext()){
			sb.append(iter.next().toString());
			sb.append(", ");
		}
		System.out.println(sb);
	}
	
	public Iterator<IToken> getTokenIterator(org.eclipse.jface.text.IRegion region) {
		int startOffset = region.getOffset();
		int endOffset = startOffset + region.getLength();
		
		List<IToken> list = new ArrayList<IToken>();
		synchronized(LOCK){
			Iterator<IToken> iter = tokenList.iterator();
			while(iter.hasNext()){
				IToken next = iter.next();
				if(next.getStartOffset() < startOffset || next.getEndOffset() > endOffset){
					continue;
				} else {
					list.add(next);
				}
			}
		}
		
		return list.iterator();
	}
	
	/**
	 * The parse tree generated during the parsing process.
	 */
	protected EnhancedParseTree<IEnhancedParseTreeNode> enParseTree = new EnhancedParseTree<IEnhancedParseTreeNode>();

	protected int getKind(SingleDFAMatchData scanResult){
		String term = getSymbolNames()[scanResult.firstTerm];
		return tokenClassifier.getKind(term);
	}
	
	private ICopperTokenClassifier tokenClassifier = edu.umn.cs.melt.ableC.artifacts.ide_basic.imp.coloring.Parser_edu_umn_cs_melt_ableC_artifacts_ide_basic_theParser_TokenClassifier.getInstance();
	
	//Following is the code for visitor service
	private final static Map<String, Integer> SYMBOL_NAME_INDEX_MAP = new HashMap<String, Integer>();

	static {
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_LineComment", 4);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_BlockComment", 5);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_WhiteSpace", 6);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Identifier_t", 8);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_TypeName_t", 9);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_DecimalConstant_t", 11);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Constant_t", 12);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_FloatConstant_t", 13);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_HexFloatConst_t", 14);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_StringLiteral_t", 15);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_CharLiteral_t", 16);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Char_t", 17);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Double_t", 18);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Float_t", 19);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Int_t", 20);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Long_t", 21);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Short_t", 22);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Signed_t", 23);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Unsigned_t", 24);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Void_t", 25);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Bool_t", 26);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Complex_t", 27);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Imagin_t", 28);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_ENUM", 29);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_STRUCT", 30);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_UNION", 31);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Const_t", 32);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Volatile_t", 33);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Restrict_t", 34);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Inline_t", 35);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Auto_t", 36);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Extern_t", 37);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Register_t", 38);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Static_t", 39);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Typedef_t", 40);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_BREAK", 41);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_CASE", 42);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_CONTINUE", 43);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_DEFAULT", 44);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_DO", 45);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_ELSE", 46);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_FOR", 47);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_GOTO", 48);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_IF", 49);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Return_t", 50);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_SWITCH", 51);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_WHILE", 52);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_SIZEOF", 53);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Comma_t", 54);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Semi_t", 55);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_LParen_t", 56);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_RParen_t", 57);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_LBracket_t", 58);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_RBracket_t", 59);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_LCurly_t", 60);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_RCurly_t", 61);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Question_t", 62);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Colon_t", 63);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Dot_t", 64);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_PTR_OP", 65);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Assign_t", 66);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_RIGHT_ASSIGN", 67);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_LEFT_ASSIGN", 68);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_ADD_ASSIGN", 69);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_SUB_ASSIGN", 70);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_MUL_ASSIGN", 71);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_DIV_ASSIGN", 72);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_MOD_ASSIGN", 73);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_AND_ASSIGN", 74);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_XOR_ASSIGN", 75);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_OR_ASSIGN", 76);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_And_t", 77);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Or_t", 78);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Tilde_t", 79);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Xor_t", 80);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_RIGHT_OP", 81);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_LEFT_OP", 82);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Minus_t", 83);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Plus_t", 84);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Star_t", 85);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Divide_t", 86);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Mod_t", 87);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Not_t", 88);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_AndOp_t", 89);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_OrOp_t", 90);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_LessThan_t", 91);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_GreaterThan_t", 92);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_LessThanEqual_t", 93);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_GreaterThanEqual_t", 94);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Equality_t", 95);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_NonEquality_t", 96);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_INC_OP", 97);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_DEC_OP", 98);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_ELLIPSES", 99);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Cpp_Attribute_high_prec", 100);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_CompoundStatement_c", 101);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_BlockItemList_c", 104);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_BlockItem_c", 107);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Stmt_c", 110);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_LabeledStmt_c", 117);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_ExprStmt_c", 121);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_SelectionStmt_c", 124);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_IterationStmt_c", 128);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_JumpStmt_c", 135);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Root", 141);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_TranslationUnit_c", 144);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_ExternalDeclaration_c", 147);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_IdentType", 151);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Expr_c", 152);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_AssignExpr_c", 155);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_ConstantExpr_c", 158);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Initializer_c", 160);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_AssignOp_c", 164);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_ConditionalExpr_c", 176);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_LogicalOrExpr_c", 179);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_LogicalAndExpr_c", 182);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_InclusiveOrExpr_c", 185);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_ExclusiveOrExpr_c", 188);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_AndExpr_c", 191);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_EqualityExpr_c", 194);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_RelationalExpr_c", 198);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_ShiftExpr_c", 204);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_AdditiveExpr_c", 208);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_AdditiveOp_c", 211);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_AddMulLeft_c", 214);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_AddMulLeftOp_c", 217);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_AddMulLeft_NEVER_t", 218);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_AddMulRight_c", 220);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_AddMulRightOp_c", 223);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_AddMulRight_NEVER_t", 224);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_AddMulNone_c", 226);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_AddMulNoneOp_c", 229);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_AddMulNone_NEVER_t", 230);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_MultiplicativeExpr_c", 232);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_CastExpr_c", 237);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_UnaryExpr_c", 240);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_UnaryOp_c", 247);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_PostfixExpr_c", 254);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_ArgumentExprList_c", 265);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_PrimaryExpr_c", 268);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_StringConstant_c", 277);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_InitializerList_c", 280);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Designation_c", 285);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_DesignatorList_c", 287);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Designator_c", 290);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_ArrayDesignator_c", 293);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_DeclarationSpecifiers_c", 295);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_SpecifierQualifierList_c", 304);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_TypeQualifierList_c", 309);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_StorageClassSpecifier_c", 312);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_TypeSpecifier_c", 318);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_TypeQualifier_c", 334);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_FunctionSpecifier_c", 338);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_StructOrUnionSpecifier_c", 340);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_StructOrUnion_c", 344);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_StructDeclarationList_c", 347);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_StructDeclaration_c", 350);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_StructDeclaratorList_c", 352);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_StructDeclarator_c", 355);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_EnumSpecifier_c", 359);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_EnumeratorList_c", 365);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Enumerator_c", 368);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_FunctionDefinition_c", 371);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Declaration_c", 373);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Declarator_c", 376);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_TypeName_c", 379);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_InitialFunctionDefinition_c", 382);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_DeclarationList_c", 385);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_Pointer_c", 388);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_DirectDeclarator_c", 393);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_AbstractDeclarator_c", 408);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_DirectAbstractDeclarator_c", 412);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_ParameterTypeList_c", 424);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_ParameterList_c", 427);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_ParameterDeclaration_c", 430);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_IdentifierList_c", 434);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_InitDeclaratorList_c", 437);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_InitDeclarator_c", 440);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_cppTags_Space_t", 443);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_cppTags_Hash_t", 444);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_cppTags_CPP_Location_Tag_t", 445);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_c11_C11_AlignAs_t", 446);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_c11_AlignmentSpecifier_c", 449);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_c11_C11_Noreturn_t", 452);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_c11_C11_Generic_t", 454);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_c11_GenericSelection_c", 456);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_c11_GenericAssocList_c", 458);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_c11_GenericAssoc_c", 461);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_c11_C11_Atomic_t", 464);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_c11_C11_Atomic_LParen_t", 465);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_c11_C11_Thread_local_t", 468);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_c11_C11_Static_assert_t", 470);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_c11_StaticAssertDeclaration_c", 471);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_c11_C11_Alignof_t", 474);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Attribute_t", 476);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_UUAttribute_t", 477);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Attr_LowerPrec_t", 478);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Attributes_c", 479);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Attribute_c", 482);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AttributeList_c", 485);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Attrib_c", 488);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AttribName_c", 492);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_UULabel_t", 497);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_LabelDeclarations_c", 499);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_LabelDeclaration_c", 502);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_PragmaMark", 511);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Pragma_t", 512);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_RedefExtname_t", 513);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Pack_t", 514);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_ImaginaryFloatConstant_t", 517);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_ImaginaryHexFloatConst_t", 518);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_UUReal_t", 521);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_UURealUU_t", 522);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_UUImag_t", 523);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_UUImagUU_t", 524);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_AlignOf_T", 529);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_AlignOfUU_T", 530);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_BuiltinVaArg_t", 531);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_BuiltinOffsetof_t", 532);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_BuiltinTypesCompatible_t", 533);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_MemberDesignator_c", 545);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Extension_t", 554);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Inline_OneSided_t", 555);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Inline_t", 556);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Signed_t", 557);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Volatile_t", 558);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_UUVolatile_t", 559);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_UUConst_t", 560);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_UUBuiltinVAList_t", 561);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_UURestrict_t", 562);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_UURestrictUU_t", 563);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Typeof_t", 564);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Typeof_t", 565);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_UUTypeof_t", 566);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_TypeofStarter_c", 581);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_NestedFunctionDefinition_c", 586);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_InitialNestedFunctionDefinition_c", 588);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Asm_t", 608);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Asm_t", 609);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_UUAsm_t", 610);//T
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_SimpleAsmStatement_c", 611);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Asm_Statement_c", 613);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Asm_Starter_c", 616);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmArgument_c", 620);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmClobbers_c", 632);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmOperands_c", 635);//NT
		SYMBOL_NAME_INDEX_MAP.put("edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmOperand_c", 638);//NT
	}

	private static String[] StaticSymbolNames;

	private static String[] getSymbolNamesStatic(){
		return StaticSymbolNames;
	}

	private static int convertSymbolToIndex(int sym){
		String name = getSymbolNamesStatic()[sym];
		Integer i = SYMBOL_NAME_INDEX_MAP.get(name);
		return i!=null ? i : -1;
	}

	/**
	 * The visitor interface for visiting an AST generated by this parser.
	 * <p>
	 * Use visitASTRoot(...) from the parser class to accept a visitor on target AST root node.
	 */
	public static interface ASTVisitor {
		void visit_edu_umn_cs_melt_ableC_concretesyntax_LineComment(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_BlockComment(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_WhiteSpace(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Identifier_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_TypeName_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_DecimalConstant_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Constant_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_FloatConstant_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_HexFloatConst_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_StringLiteral_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_CharLiteral_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Char_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Double_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Float_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Int_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Long_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Short_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Signed_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Unsigned_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Void_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Bool_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Complex_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Imagin_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_ENUM(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_STRUCT(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_UNION(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Const_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Volatile_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Restrict_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Inline_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Auto_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Extern_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Register_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Static_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Typedef_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_BREAK(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_CASE(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_CONTINUE(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_DEFAULT(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_DO(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_ELSE(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_FOR(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_GOTO(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_IF(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Return_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_SWITCH(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_WHILE(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_SIZEOF(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Comma_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Semi_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_LParen_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_RParen_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_LBracket_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_RBracket_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_LCurly_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_RCurly_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Question_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Colon_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Dot_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_PTR_OP(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Assign_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_RIGHT_ASSIGN(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_LEFT_ASSIGN(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_ADD_ASSIGN(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_SUB_ASSIGN(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_MUL_ASSIGN(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_DIV_ASSIGN(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_MOD_ASSIGN(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_AND_ASSIGN(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_XOR_ASSIGN(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_OR_ASSIGN(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_And_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Or_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Tilde_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Xor_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_RIGHT_OP(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_LEFT_OP(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Minus_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Plus_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Star_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Divide_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Mod_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Not_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_AndOp_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_OrOp_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_LessThan_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_GreaterThan_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_LessThanEqual_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_GreaterThanEqual_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Equality_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_NonEquality_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_INC_OP(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_DEC_OP(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_ELLIPSES(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Cpp_Attribute_high_prec(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_CompoundStatement_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_BlockItemList_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_BlockItem_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Stmt_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_LabeledStmt_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_ExprStmt_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_SelectionStmt_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_IterationStmt_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_JumpStmt_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Root(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_TranslationUnit_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_ExternalDeclaration_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_IdentType(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Expr_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_AssignExpr_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_ConstantExpr_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Initializer_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_AssignOp_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_ConditionalExpr_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_LogicalOrExpr_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_LogicalAndExpr_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_InclusiveOrExpr_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_ExclusiveOrExpr_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_AndExpr_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_EqualityExpr_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_RelationalExpr_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_ShiftExpr_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_AdditiveExpr_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_AdditiveOp_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_AddMulLeft_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_AddMulLeftOp_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_AddMulLeft_NEVER_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_AddMulRight_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_AddMulRightOp_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_AddMulRight_NEVER_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_AddMulNone_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_AddMulNoneOp_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_AddMulNone_NEVER_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_MultiplicativeExpr_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_CastExpr_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_UnaryExpr_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_UnaryOp_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_PostfixExpr_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_ArgumentExprList_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_PrimaryExpr_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_StringConstant_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_InitializerList_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Designation_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_DesignatorList_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Designator_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_ArrayDesignator_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_DeclarationSpecifiers_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_SpecifierQualifierList_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_TypeQualifierList_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_StorageClassSpecifier_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_TypeSpecifier_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_TypeQualifier_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_FunctionSpecifier_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_StructOrUnionSpecifier_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_StructOrUnion_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_StructDeclarationList_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_StructDeclaration_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_StructDeclaratorList_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_StructDeclarator_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_EnumSpecifier_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_EnumeratorList_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Enumerator_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_FunctionDefinition_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Declaration_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Declarator_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_TypeName_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_InitialFunctionDefinition_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_DeclarationList_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_Pointer_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_DirectDeclarator_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_AbstractDeclarator_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_DirectAbstractDeclarator_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_ParameterTypeList_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_ParameterList_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_ParameterDeclaration_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_IdentifierList_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_InitDeclaratorList_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_InitDeclarator_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_cppTags_Space_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_cppTags_Hash_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_cppTags_CPP_Location_Tag_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_c11_C11_AlignAs_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_c11_AlignmentSpecifier_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_c11_C11_Noreturn_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_c11_C11_Generic_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_c11_GenericSelection_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_c11_GenericAssocList_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_c11_GenericAssoc_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_c11_C11_Atomic_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_c11_C11_Atomic_LParen_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_c11_C11_Thread_local_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_c11_C11_Static_assert_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_c11_StaticAssertDeclaration_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_c11_C11_Alignof_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Attribute_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_UUAttribute_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Attr_LowerPrec_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Attributes_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Attribute_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AttributeList_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Attrib_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AttribName_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_UULabel_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_LabelDeclarations_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_LabelDeclaration_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_PragmaMark(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Pragma_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_RedefExtname_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Pack_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_ImaginaryFloatConstant_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_ImaginaryHexFloatConst_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_UUReal_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_UURealUU_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_UUImag_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_UUImagUU_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_AlignOf_T(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_AlignOfUU_T(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_BuiltinVaArg_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_BuiltinOffsetof_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_BuiltinTypesCompatible_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_MemberDesignator_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Extension_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Inline_OneSided_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Inline_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Signed_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Volatile_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_UUVolatile_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_UUConst_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_UUBuiltinVAList_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_UURestrict_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_UURestrictUU_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Typeof_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Typeof_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_UUTypeof_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_TypeofStarter_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_NestedFunctionDefinition_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_InitialNestedFunctionDefinition_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Asm_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Asm_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_UUAsm_t(IEnhancedParseTreeLeafNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_SimpleAsmStatement_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Asm_Statement_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Asm_Starter_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmArgument_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmClobbers_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmOperands_c(IEnhancedParseTreeInnerNode node);
		void visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmOperand_c(IEnhancedParseTreeInnerNode node);
	}

	public static void visitASTRoot(
		AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NRoot> ast, 
		ASTVisitor visitor){
		visitInnerNode(ast, visitor);
	}

	private static void visitInnerNode(IEnhancedParseTreeInnerNode innerNode, ASTVisitor visitor){
		int index = convertSymbolToIndex(innerNode.getSymbol());
		doVisitInnerNode(index, innerNode, visitor);
		IEnhancedParseTreeNode[] children = innerNode.getChildren();
		if(children!=null){
			for(IEnhancedParseTreeNode child:children){
				if(child instanceof IEnhancedParseTreeInnerNode){
					visitInnerNode((IEnhancedParseTreeInnerNode)child, visitor);
				} else {
					visitLeafNode((IEnhancedParseTreeLeafNode)child, visitor);
				}
			}
		}
	}

	private static void visitLeafNode(IEnhancedParseTreeLeafNode leaf, ASTVisitor visitor) {
		int index = convertSymbolToIndex(leaf.getSymbol());
		doVisitLeafNode(index, leaf, visitor);
	}

	private static void doVisitInnerNode(int index, IEnhancedParseTreeInnerNode node, ASTVisitor visitor){
		switch(index){
		case 101: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_CompoundStatement_c(node);break;
		case 104: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_BlockItemList_c(node);break;
		case 107: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_BlockItem_c(node);break;
		case 110: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Stmt_c(node);break;
		case 117: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_LabeledStmt_c(node);break;
		case 121: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_ExprStmt_c(node);break;
		case 124: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_SelectionStmt_c(node);break;
		case 128: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_IterationStmt_c(node);break;
		case 135: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_JumpStmt_c(node);break;
		case 141: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Root(node);break;
		case 144: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_TranslationUnit_c(node);break;
		case 147: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_ExternalDeclaration_c(node);break;
		case 151: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_IdentType(node);break;
		case 152: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Expr_c(node);break;
		case 155: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_AssignExpr_c(node);break;
		case 158: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_ConstantExpr_c(node);break;
		case 160: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Initializer_c(node);break;
		case 164: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_AssignOp_c(node);break;
		case 176: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_ConditionalExpr_c(node);break;
		case 179: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_LogicalOrExpr_c(node);break;
		case 182: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_LogicalAndExpr_c(node);break;
		case 185: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_InclusiveOrExpr_c(node);break;
		case 188: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_ExclusiveOrExpr_c(node);break;
		case 191: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_AndExpr_c(node);break;
		case 194: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_EqualityExpr_c(node);break;
		case 198: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_RelationalExpr_c(node);break;
		case 204: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_ShiftExpr_c(node);break;
		case 208: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_AdditiveExpr_c(node);break;
		case 211: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_AdditiveOp_c(node);break;
		case 214: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_AddMulLeft_c(node);break;
		case 217: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_AddMulLeftOp_c(node);break;
		case 220: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_AddMulRight_c(node);break;
		case 223: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_AddMulRightOp_c(node);break;
		case 226: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_AddMulNone_c(node);break;
		case 229: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_AddMulNoneOp_c(node);break;
		case 232: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_MultiplicativeExpr_c(node);break;
		case 237: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_CastExpr_c(node);break;
		case 240: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_UnaryExpr_c(node);break;
		case 247: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_UnaryOp_c(node);break;
		case 254: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_PostfixExpr_c(node);break;
		case 265: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_ArgumentExprList_c(node);break;
		case 268: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_PrimaryExpr_c(node);break;
		case 277: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_StringConstant_c(node);break;
		case 280: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_InitializerList_c(node);break;
		case 285: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Designation_c(node);break;
		case 287: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_DesignatorList_c(node);break;
		case 290: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Designator_c(node);break;
		case 293: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_ArrayDesignator_c(node);break;
		case 295: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_DeclarationSpecifiers_c(node);break;
		case 304: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_SpecifierQualifierList_c(node);break;
		case 309: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_TypeQualifierList_c(node);break;
		case 312: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_StorageClassSpecifier_c(node);break;
		case 318: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_TypeSpecifier_c(node);break;
		case 334: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_TypeQualifier_c(node);break;
		case 338: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_FunctionSpecifier_c(node);break;
		case 340: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_StructOrUnionSpecifier_c(node);break;
		case 344: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_StructOrUnion_c(node);break;
		case 347: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_StructDeclarationList_c(node);break;
		case 350: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_StructDeclaration_c(node);break;
		case 352: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_StructDeclaratorList_c(node);break;
		case 355: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_StructDeclarator_c(node);break;
		case 359: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_EnumSpecifier_c(node);break;
		case 365: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_EnumeratorList_c(node);break;
		case 368: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Enumerator_c(node);break;
		case 371: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_FunctionDefinition_c(node);break;
		case 373: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Declaration_c(node);break;
		case 376: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Declarator_c(node);break;
		case 379: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_TypeName_c(node);break;
		case 382: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_InitialFunctionDefinition_c(node);break;
		case 385: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_DeclarationList_c(node);break;
		case 388: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Pointer_c(node);break;
		case 393: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_DirectDeclarator_c(node);break;
		case 408: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_AbstractDeclarator_c(node);break;
		case 412: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_DirectAbstractDeclarator_c(node);break;
		case 424: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_ParameterTypeList_c(node);break;
		case 427: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_ParameterList_c(node);break;
		case 430: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_ParameterDeclaration_c(node);break;
		case 434: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_IdentifierList_c(node);break;
		case 437: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_InitDeclaratorList_c(node);break;
		case 440: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_InitDeclarator_c(node);break;
		case 449: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_c11_AlignmentSpecifier_c(node);break;
		case 456: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_c11_GenericSelection_c(node);break;
		case 458: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_c11_GenericAssocList_c(node);break;
		case 461: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_c11_GenericAssoc_c(node);break;
		case 471: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_c11_StaticAssertDeclaration_c(node);break;
		case 479: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Attributes_c(node);break;
		case 482: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Attribute_c(node);break;
		case 485: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AttributeList_c(node);break;
		case 488: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Attrib_c(node);break;
		case 492: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AttribName_c(node);break;
		case 499: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_LabelDeclarations_c(node);break;
		case 502: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_LabelDeclaration_c(node);break;
		case 545: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_MemberDesignator_c(node);break;
		case 581: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_TypeofStarter_c(node);break;
		case 586: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_NestedFunctionDefinition_c(node);break;
		case 588: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_InitialNestedFunctionDefinition_c(node);break;
		case 611: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_SimpleAsmStatement_c(node);break;
		case 613: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Asm_Statement_c(node);break;
		case 616: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Asm_Starter_c(node);break;
		case 620: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmArgument_c(node);break;
		case 632: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmClobbers_c(node);break;
		case 635: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmOperands_c(node);break;
		case 638: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmOperand_c(node);break;
		}
	}

	private static void doVisitLeafNode(int index, IEnhancedParseTreeLeafNode node, ASTVisitor visitor){
		switch(index){
		case 4: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_LineComment(node);break;
		case 5: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_BlockComment(node);break;
		case 6: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_WhiteSpace(node);break;
		case 8: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Identifier_t(node);break;
		case 9: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_TypeName_t(node);break;
		case 11: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_DecimalConstant_t(node);break;
		case 12: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Constant_t(node);break;
		case 13: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_FloatConstant_t(node);break;
		case 14: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_HexFloatConst_t(node);break;
		case 15: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_StringLiteral_t(node);break;
		case 16: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_CharLiteral_t(node);break;
		case 17: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Char_t(node);break;
		case 18: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Double_t(node);break;
		case 19: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Float_t(node);break;
		case 20: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Int_t(node);break;
		case 21: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Long_t(node);break;
		case 22: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Short_t(node);break;
		case 23: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Signed_t(node);break;
		case 24: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Unsigned_t(node);break;
		case 25: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Void_t(node);break;
		case 26: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Bool_t(node);break;
		case 27: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Complex_t(node);break;
		case 28: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Imagin_t(node);break;
		case 29: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_ENUM(node);break;
		case 30: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_STRUCT(node);break;
		case 31: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_UNION(node);break;
		case 32: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Const_t(node);break;
		case 33: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Volatile_t(node);break;
		case 34: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Restrict_t(node);break;
		case 35: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Inline_t(node);break;
		case 36: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Auto_t(node);break;
		case 37: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Extern_t(node);break;
		case 38: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Register_t(node);break;
		case 39: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Static_t(node);break;
		case 40: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Typedef_t(node);break;
		case 41: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_BREAK(node);break;
		case 42: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_CASE(node);break;
		case 43: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_CONTINUE(node);break;
		case 44: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_DEFAULT(node);break;
		case 45: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_DO(node);break;
		case 46: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_ELSE(node);break;
		case 47: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_FOR(node);break;
		case 48: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_GOTO(node);break;
		case 49: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_IF(node);break;
		case 50: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Return_t(node);break;
		case 51: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_SWITCH(node);break;
		case 52: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_WHILE(node);break;
		case 53: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_SIZEOF(node);break;
		case 54: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Comma_t(node);break;
		case 55: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Semi_t(node);break;
		case 56: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_LParen_t(node);break;
		case 57: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_RParen_t(node);break;
		case 58: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_LBracket_t(node);break;
		case 59: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_RBracket_t(node);break;
		case 60: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_LCurly_t(node);break;
		case 61: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_RCurly_t(node);break;
		case 62: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Question_t(node);break;
		case 63: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Colon_t(node);break;
		case 64: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Dot_t(node);break;
		case 65: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_PTR_OP(node);break;
		case 66: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Assign_t(node);break;
		case 67: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_RIGHT_ASSIGN(node);break;
		case 68: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_LEFT_ASSIGN(node);break;
		case 69: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_ADD_ASSIGN(node);break;
		case 70: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_SUB_ASSIGN(node);break;
		case 71: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_MUL_ASSIGN(node);break;
		case 72: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_DIV_ASSIGN(node);break;
		case 73: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_MOD_ASSIGN(node);break;
		case 74: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_AND_ASSIGN(node);break;
		case 75: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_XOR_ASSIGN(node);break;
		case 76: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_OR_ASSIGN(node);break;
		case 77: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_And_t(node);break;
		case 78: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Or_t(node);break;
		case 79: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Tilde_t(node);break;
		case 80: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Xor_t(node);break;
		case 81: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_RIGHT_OP(node);break;
		case 82: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_LEFT_OP(node);break;
		case 83: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Minus_t(node);break;
		case 84: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Plus_t(node);break;
		case 85: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Star_t(node);break;
		case 86: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Divide_t(node);break;
		case 87: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Mod_t(node);break;
		case 88: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Not_t(node);break;
		case 89: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_AndOp_t(node);break;
		case 90: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_OrOp_t(node);break;
		case 91: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_LessThan_t(node);break;
		case 92: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_GreaterThan_t(node);break;
		case 93: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_LessThanEqual_t(node);break;
		case 94: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_GreaterThanEqual_t(node);break;
		case 95: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Equality_t(node);break;
		case 96: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_NonEquality_t(node);break;
		case 97: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_INC_OP(node);break;
		case 98: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_DEC_OP(node);break;
		case 99: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_ELLIPSES(node);break;
		case 100: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_Cpp_Attribute_high_prec(node);break;
		case 218: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_AddMulLeft_NEVER_t(node);break;
		case 224: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_AddMulRight_NEVER_t(node);break;
		case 230: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_AddMulNone_NEVER_t(node);break;
		case 443: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_cppTags_Space_t(node);break;
		case 444: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_cppTags_Hash_t(node);break;
		case 445: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_cppTags_CPP_Location_Tag_t(node);break;
		case 446: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_c11_C11_AlignAs_t(node);break;
		case 452: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_c11_C11_Noreturn_t(node);break;
		case 454: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_c11_C11_Generic_t(node);break;
		case 464: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_c11_C11_Atomic_t(node);break;
		case 465: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_c11_C11_Atomic_LParen_t(node);break;
		case 468: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_c11_C11_Thread_local_t(node);break;
		case 470: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_c11_C11_Static_assert_t(node);break;
		case 474: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_c11_C11_Alignof_t(node);break;
		case 476: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Attribute_t(node);break;
		case 477: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_UUAttribute_t(node);break;
		case 478: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Attr_LowerPrec_t(node);break;
		case 497: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_UULabel_t(node);break;
		case 511: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_PragmaMark(node);break;
		case 512: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Pragma_t(node);break;
		case 513: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_RedefExtname_t(node);break;
		case 514: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Pack_t(node);break;
		case 517: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_ImaginaryFloatConstant_t(node);break;
		case 518: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_ImaginaryHexFloatConst_t(node);break;
		case 521: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_UUReal_t(node);break;
		case 522: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_UURealUU_t(node);break;
		case 523: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_UUImag_t(node);break;
		case 524: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_UUImagUU_t(node);break;
		case 529: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_AlignOf_T(node);break;
		case 530: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_AlignOfUU_T(node);break;
		case 531: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_BuiltinVaArg_t(node);break;
		case 532: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_BuiltinOffsetof_t(node);break;
		case 533: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_BuiltinTypesCompatible_t(node);break;
		case 554: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Extension_t(node);break;
		case 555: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Inline_OneSided_t(node);break;
		case 556: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Inline_t(node);break;
		case 557: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Signed_t(node);break;
		case 558: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Volatile_t(node);break;
		case 559: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_UUVolatile_t(node);break;
		case 560: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_UUConst_t(node);break;
		case 561: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_UUBuiltinVAList_t(node);break;
		case 562: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_UURestrict_t(node);break;
		case 563: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_UURestrictUU_t(node);break;
		case 564: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Typeof_t(node);break;
		case 565: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Typeof_t(node);break;
		case 566: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_UUTypeof_t(node);break;
		case 608: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Asm_t(node);break;
		case 609: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Asm_t(node);break;
		case 610: visitor.visit_edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_UUAsm_t(node);break;
		}
	}

	//IDE Extension END
      ]]></Code>
    </ClassAuxiliaryCode>
    <ParserInitCode>
      <Code><![CDATA[
        reset();
      ]]></Code>
    </ParserInitCode>
    <Preamble>
<Code><![CDATA[
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.HashMap;
import java.util.Map;
import edu.umn.cs.melt.copper.runtime.engines.single.scanner.SingleDFAMatchData;
import edu.umn.cs.melt.ide.copper.*;
import edu.umn.cs.melt.ide.copper.coloring.*;
]]></Code>
    </Preamble>
    <SemanticActionAuxiliaryCode>
      <Code><![CDATA[
private int getCurrentProduction(){
  return _prod;
}
      ]]></Code>
    </SemanticActionAuxiliaryCode>
  </Parser>

  <Grammar id="host">

    <PP>host</PP>

    <Layout><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_BlockComment" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LineComment" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_WhiteSpace" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_cppTags_CPP_Location_Tag_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_PragmaMark" grammar="host" /></Layout>

    <Declarations>
      <ParserAttribute id="context">
        <Type><![CDATA[common.DecoratedNode]]></Type>
        <Code><![CDATA[context = common.TopNode.singleton;]]></Code>
      </ParserAttribute>
  <TerminalClass id="edu_umn_cs_melt_ableC_concretesyntax_Cassignment" />
  <TerminalClass id="edu_umn_cs_melt_ableC_concretesyntax_Ccomment" />
  <TerminalClass id="edu_umn_cs_melt_ableC_concretesyntax_Cidentifier" />
  <TerminalClass id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" />
  <TerminalClass id="edu_umn_cs_melt_ableC_concretesyntax_Cliteral" />
  <TerminalClass id="edu_umn_cs_melt_ableC_concretesyntax_Csymbol" />
  <ParserAttribute id="edu_umn_cs_melt_ableC_concretesyntax_context">
    <Type><![CDATA[common.ConsCell]]></Type>
    <Code><![CDATA[
edu_umn_cs_melt_ableC_concretesyntax_context = ((common.ConsCell)core.Pcons.invoke(((common.ConsCell)core.Pnil.invoke()), ((common.ConsCell)core.Pnil.invoke())));
]]></Code>
  </ParserAttribute>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_ADD_ASSIGN">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:ADD_ASSIGN</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="+"/></CharacterSet><CharacterSet><SingleCharacter char="="/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Cassignment" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_AND_ASSIGN">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:AND_ASSIGN</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="&amp;"/></CharacterSet><CharacterSet><SingleCharacter char="="/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Cassignment" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_AddMulLeft_NEVER_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:AddMulLeft_NEVER_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="A"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="M"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="L"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="f"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="N"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="v"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="!"/></CharacterSet><CharacterSet><SingleCharacter char="!"/></CharacterSet><CharacterSet><SingleCharacter char="!"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="v"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="v"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="1"/></CharacterSet><CharacterSet><SingleCharacter char="2"/></CharacterSet><CharacterSet><SingleCharacter char="3"/></CharacterSet><CharacterSet><SingleCharacter char="4"/></CharacterSet><CharacterSet><SingleCharacter char="5"/></CharacterSet><CharacterSet><SingleCharacter char="6"/></CharacterSet><CharacterSet><SingleCharacter char="7"/></CharacterSet><CharacterSet><SingleCharacter char="8"/></CharacterSet><CharacterSet><SingleCharacter char="9"/></CharacterSet><CharacterSet><SingleCharacter char="0"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_AddMulNone_NEVER_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:AddMulNone_NEVER_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="A"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="M"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="N"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="N"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="v"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="!"/></CharacterSet><CharacterSet><SingleCharacter char="!"/></CharacterSet><CharacterSet><SingleCharacter char="!"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="v"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="v"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="1"/></CharacterSet><CharacterSet><SingleCharacter char="2"/></CharacterSet><CharacterSet><SingleCharacter char="3"/></CharacterSet><CharacterSet><SingleCharacter char="4"/></CharacterSet><CharacterSet><SingleCharacter char="5"/></CharacterSet><CharacterSet><SingleCharacter char="6"/></CharacterSet><CharacterSet><SingleCharacter char="7"/></CharacterSet><CharacterSet><SingleCharacter char="8"/></CharacterSet><CharacterSet><SingleCharacter char="9"/></CharacterSet><CharacterSet><SingleCharacter char="0"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_AddMulRight_NEVER_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:AddMulRight_NEVER_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="A"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="M"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="R"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="g"/></CharacterSet><CharacterSet><SingleCharacter char="h"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="N"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="v"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="!"/></CharacterSet><CharacterSet><SingleCharacter char="!"/></CharacterSet><CharacterSet><SingleCharacter char="!"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="v"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="v"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="1"/></CharacterSet><CharacterSet><SingleCharacter char="2"/></CharacterSet><CharacterSet><SingleCharacter char="3"/></CharacterSet><CharacterSet><SingleCharacter char="4"/></CharacterSet><CharacterSet><SingleCharacter char="5"/></CharacterSet><CharacterSet><SingleCharacter char="6"/></CharacterSet><CharacterSet><SingleCharacter char="7"/></CharacterSet><CharacterSet><SingleCharacter char="8"/></CharacterSet><CharacterSet><SingleCharacter char="9"/></CharacterSet><CharacterSet><SingleCharacter char="0"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_AndOp_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:AndOp_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="&amp;"/></CharacterSet><CharacterSet><SingleCharacter char="&amp;"/></CharacterSet></Concatenation></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>4</Precedence>
      <LeftAssociative/>
    </Operator>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Csymbol" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_And_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:And_t</PP>
    <Regex><CharacterSet><SingleCharacter char="&amp;"/></CharacterSet></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Csymbol" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_Assign_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Assign_t</PP>
    <Regex><CharacterSet><SingleCharacter char="="/></CharacterSet></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Cassignment" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_Auto_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Auto_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_BREAK">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:BREAK</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="b"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="k"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_BlockComment">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:BlockComment</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="/"/></CharacterSet><CharacterSet><SingleCharacter char="*"/></CharacterSet><KleeneStar><Choice><CharacterSet invert="true"><SingleCharacter char="*"/></CharacterSet><Choice><CharacterSet><SingleCharacter char="&#13;"/><SingleCharacter char="&#10;"/></CharacterSet><Concatenation><Concatenation><CharacterSet><SingleCharacter char="*"/></CharacterSet><KleeneStar><CharacterSet><SingleCharacter char="*"/></CharacterSet></KleeneStar></Concatenation><Choice><CharacterSet invert="true"><SingleCharacter char="*"/><SingleCharacter char="/"/></CharacterSet><CharacterSet><SingleCharacter char="&#13;"/><SingleCharacter char="&#10;"/></CharacterSet></Choice></Concatenation></Choice></Choice></KleeneStar><Concatenation><CharacterSet><SingleCharacter char="*"/></CharacterSet><KleeneStar><CharacterSet><SingleCharacter char="*"/></CharacterSet></KleeneStar></Concatenation><CharacterSet><SingleCharacter char="/"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ccomment" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_Bool_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Bool_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="B"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_CASE">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:CASE</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_CONTINUE">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:CONTINUE</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_CharLiteral_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:CharLiteral_t</PP>
    <Regex><Concatenation><KleeneStar><CharacterSet><SingleCharacter char="U"/><SingleCharacter char="u"/><SingleCharacter char="8"/><SingleCharacter char="L"/></CharacterSet></KleeneStar><CharacterSet><SingleCharacter char="'"/></CharacterSet><Choice><CharacterSet invert="true"><SingleCharacter char="'"/></CharacterSet><Concatenation><CharacterSet><SingleCharacter char="\"/></CharacterSet><CharacterSet invert="true"><SingleCharacter char="&#10;"/></CharacterSet></Concatenation></Choice><CharacterSet><SingleCharacter char="'"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Cliteral" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_Char_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Char_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="h"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_Colon_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Colon_t</PP>
    <Regex><CharacterSet><SingleCharacter char=":"/></CharacterSet></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_Comma_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Comma_t</PP>
    <Regex><CharacterSet><SingleCharacter char=","/></CharacterSet></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_Complex_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Complex_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="C"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="m"/></CharacterSet><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="x"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_Const_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Const_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_Constant_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Constant_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="0"/></CharacterSet><CharacterSet><SingleCharacter char="x"/><SingleCharacter char="X"/></CharacterSet><KleeneStar><CharacterSet><CharacterRange lower="a" upper="f"/><CharacterRange lower="A" upper="F"/><CharacterRange lower="0" upper="9"/></CharacterSet></KleeneStar><KleeneStar><CharacterSet><SingleCharacter char="u"/><SingleCharacter char="U"/><SingleCharacter char="l"/><SingleCharacter char="L"/></CharacterSet></KleeneStar></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Cliteral" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_Cpp_Attribute_high_prec">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Cpp_Attribute_high_prec</PP>
    <Regex><EmptyString/></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>20</Precedence>
      <NonAssociative/>
    </Operator>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_DEC_OP">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:DEC_OP</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="-"/></CharacterSet><CharacterSet><SingleCharacter char="-"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Csymbol" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_DEFAULT">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:DEFAULT</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="f"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_DIV_ASSIGN">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:DIV_ASSIGN</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="/"/></CharacterSet><CharacterSet><SingleCharacter char="="/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Cassignment" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_DO">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:DO</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_DecimalConstant_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:DecimalConstant_t</PP>
    <Regex><Concatenation><Concatenation><CharacterSet><CharacterRange lower="0" upper="9"/></CharacterSet><KleeneStar><CharacterSet><CharacterRange lower="0" upper="9"/></CharacterSet></KleeneStar></Concatenation><KleeneStar><CharacterSet><SingleCharacter char="u"/><SingleCharacter char="U"/><SingleCharacter char="l"/><SingleCharacter char="L"/></CharacterSet></KleeneStar></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Cliteral" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_Divide_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Divide_t</PP>
    <Regex><CharacterSet><SingleCharacter char="/"/></CharacterSet></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>6</Precedence>
      <LeftAssociative/>
    </Operator>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Csymbol" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_Dot_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Dot_t</PP>
    <Regex><CharacterSet><SingleCharacter char="."/></CharacterSet></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_Double_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Double_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="b"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_ELLIPSES">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:ELLIPSES</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="."/></CharacterSet><CharacterSet><SingleCharacter char="."/></CharacterSet><CharacterSet><SingleCharacter char="."/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Csymbol" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_ELSE">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:ELSE</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet></Concatenation></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>2</Precedence>
      <LeftAssociative/>
    </Operator>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_ENUM">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:ENUM</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="m"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_Equality_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Equality_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="="/></CharacterSet><CharacterSet><SingleCharacter char="="/></CharacterSet></Concatenation></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>3</Precedence>
      <LeftAssociative/>
    </Operator>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Csymbol" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_Extern_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Extern_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="x"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_FOR">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:FOR</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="f"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_FloatConstant_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:FloatConstant_t</PP>
    <Regex><Concatenation><Choice><Concatenation><Concatenation><CharacterSet><CharacterRange lower="0" upper="9"/></CharacterSet><KleeneStar><CharacterSet><CharacterRange lower="0" upper="9"/></CharacterSet></KleeneStar></Concatenation><CharacterSet><SingleCharacter char="."/></CharacterSet><KleeneStar><CharacterSet><CharacterRange lower="0" upper="9"/></CharacterSet></KleeneStar></Concatenation><Concatenation><KleeneStar><CharacterSet><CharacterRange lower="0" upper="9"/></CharacterSet></KleeneStar><CharacterSet><SingleCharacter char="."/></CharacterSet><Concatenation><CharacterSet><CharacterRange lower="0" upper="9"/></CharacterSet><KleeneStar><CharacterSet><CharacterRange lower="0" upper="9"/></CharacterSet></KleeneStar></Concatenation></Concatenation></Choice><Choice><Concatenation><CharacterSet><SingleCharacter char="E"/><SingleCharacter char="e"/></CharacterSet><Choice><CharacterSet><SingleCharacter char="+"/><SingleCharacter char="-"/></CharacterSet><EmptyString/></Choice><Concatenation><CharacterSet><CharacterRange lower="0" upper="9"/></CharacterSet><KleeneStar><CharacterSet><CharacterRange lower="0" upper="9"/></CharacterSet></KleeneStar></Concatenation></Concatenation><EmptyString/></Choice><KleeneStar><CharacterSet><SingleCharacter char="F"/><SingleCharacter char="L"/><SingleCharacter char="f"/><SingleCharacter char="l"/></CharacterSet></KleeneStar></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Cliteral" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_Float_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Float_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="f"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_GOTO">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:GOTO</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="g"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_GreaterThanEqual_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:GreaterThanEqual_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="&gt;"/></CharacterSet><CharacterSet><SingleCharacter char="="/></CharacterSet></Concatenation></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>3</Precedence>
      <LeftAssociative/>
    </Operator>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Csymbol" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_GreaterThan_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:GreaterThan_t</PP>
    <Regex><CharacterSet><SingleCharacter char="&gt;"/></CharacterSet></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>3</Precedence>
      <LeftAssociative/>
    </Operator>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Csymbol" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_HexFloatConst_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:HexFloatConst_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="0"/></CharacterSet><CharacterSet><SingleCharacter char="x"/><SingleCharacter char="X"/></CharacterSet><Choice><Concatenation><Concatenation><CharacterSet><CharacterRange lower="a" upper="f"/><CharacterRange lower="A" upper="F"/><CharacterRange lower="0" upper="9"/></CharacterSet><KleeneStar><CharacterSet><CharacterRange lower="a" upper="f"/><CharacterRange lower="A" upper="F"/><CharacterRange lower="0" upper="9"/></CharacterSet></KleeneStar></Concatenation><CharacterSet><SingleCharacter char="."/></CharacterSet><KleeneStar><CharacterSet><CharacterRange lower="a" upper="f"/><CharacterRange lower="A" upper="F"/><CharacterRange lower="0" upper="9"/></CharacterSet></KleeneStar></Concatenation><Concatenation><KleeneStar><CharacterSet><CharacterRange lower="a" upper="f"/><CharacterRange lower="A" upper="F"/><CharacterRange lower="0" upper="9"/></CharacterSet></KleeneStar><CharacterSet><SingleCharacter char="."/></CharacterSet><Concatenation><CharacterSet><CharacterRange lower="a" upper="f"/><CharacterRange lower="A" upper="F"/><CharacterRange lower="0" upper="9"/></CharacterSet><KleeneStar><CharacterSet><CharacterRange lower="a" upper="f"/><CharacterRange lower="A" upper="F"/><CharacterRange lower="0" upper="9"/></CharacterSet></KleeneStar></Concatenation></Concatenation></Choice><Choice><Concatenation><CharacterSet><SingleCharacter char="P"/><SingleCharacter char="p"/></CharacterSet><Choice><CharacterSet><SingleCharacter char="+"/><SingleCharacter char="-"/></CharacterSet><EmptyString/></Choice><Concatenation><CharacterSet><CharacterRange lower="0" upper="9"/></CharacterSet><KleeneStar><CharacterSet><CharacterRange lower="0" upper="9"/></CharacterSet></KleeneStar></Concatenation></Concatenation><EmptyString/></Choice><KleeneStar><CharacterSet><SingleCharacter char="F"/><SingleCharacter char="L"/><SingleCharacter char="f"/><SingleCharacter char="l"/></CharacterSet></KleeneStar></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Cliteral" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_IF">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:IF</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="f"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_INC_OP">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:INC_OP</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="+"/></CharacterSet><CharacterSet><SingleCharacter char="+"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Csymbol" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_Identifier_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Identifier_t</PP>
    <Regex><Concatenation><CharacterSet><CharacterRange lower="A" upper="Z"/><CharacterRange lower="a" upper="z"/><SingleCharacter char="_"/><SingleCharacter char="$"/></CharacterSet><KleeneStar><CharacterSet><CharacterRange lower="A" upper="Z"/><CharacterRange lower="a" upper="z"/><SingleCharacter char="_"/><CharacterRange lower="0" upper="9"/><SingleCharacter char="$"/></CharacterSet></KleeneStar></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Cidentifier" grammar="host" /></InClasses>
    <Submits><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_Imagin_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Imagin_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="I"/></CharacterSet><CharacterSet><SingleCharacter char="m"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="g"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="y"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_Inline_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Inline_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_Int_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Int_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_LBracket_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:LBracket_t</PP>
    <Regex><CharacterSet><SingleCharacter char="["/></CharacterSet></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_LCurly_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:LCurly_t</PP>
    <Regex><CharacterSet><SingleCharacter char="{"/></CharacterSet></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
edu_umn_cs_melt_ableC_concretesyntax_context = ((common.ConsCell)core.Pcons.invoke(((common.ConsCell)core.Phead.invoke(edu_umn_cs_melt_ableC_concretesyntax_context)), edu_umn_cs_melt_ableC_concretesyntax_context));
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_LEFT_ASSIGN">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:LEFT_ASSIGN</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="&lt;"/></CharacterSet><CharacterSet><SingleCharacter char="&lt;"/></CharacterSet><CharacterSet><SingleCharacter char="="/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Cassignment" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_LEFT_OP">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:LEFT_OP</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="&lt;"/></CharacterSet><CharacterSet><SingleCharacter char="&lt;"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Csymbol" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:LParen_t</PP>
    <Regex><CharacterSet><SingleCharacter char="("/></CharacterSet></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_LessThanEqual_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:LessThanEqual_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="&lt;"/></CharacterSet><CharacterSet><SingleCharacter char="="/></CharacterSet></Concatenation></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>3</Precedence>
      <LeftAssociative/>
    </Operator>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Csymbol" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_LessThan_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:LessThan_t</PP>
    <Regex><CharacterSet><SingleCharacter char="&lt;"/></CharacterSet></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>3</Precedence>
      <LeftAssociative/>
    </Operator>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Csymbol" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_LineComment">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:LineComment</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="/"/></CharacterSet><CharacterSet><SingleCharacter char="/"/></CharacterSet><KleeneStar><CharacterSet invert="true"><SingleCharacter char="&#10;"/></CharacterSet></KleeneStar></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ccomment" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_Long_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Long_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="g"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_MOD_ASSIGN">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:MOD_ASSIGN</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="%"/></CharacterSet><CharacterSet><SingleCharacter char="="/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Cassignment" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_MUL_ASSIGN">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:MUL_ASSIGN</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="*"/></CharacterSet><CharacterSet><SingleCharacter char="="/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Cassignment" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_Minus_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Minus_t</PP>
    <Regex><CharacterSet><SingleCharacter char="-"/></CharacterSet></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>5</Precedence>
      <LeftAssociative/>
    </Operator>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Csymbol" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_Mod_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Mod_t</PP>
    <Regex><CharacterSet><SingleCharacter char="%"/></CharacterSet></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_NonEquality_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:NonEquality_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="!"/></CharacterSet><CharacterSet><SingleCharacter char="="/></CharacterSet></Concatenation></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>3</Precedence>
      <LeftAssociative/>
    </Operator>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Csymbol" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_Not_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Not_t</PP>
    <Regex><CharacterSet><SingleCharacter char="!"/></CharacterSet></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_OR_ASSIGN">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:OR_ASSIGN</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="|"/></CharacterSet><CharacterSet><SingleCharacter char="="/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Cassignment" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_OrOp_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:OrOp_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="|"/></CharacterSet><CharacterSet><SingleCharacter char="|"/></CharacterSet></Concatenation></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>4</Precedence>
      <LeftAssociative/>
    </Operator>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Csymbol" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_Or_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Or_t</PP>
    <Regex><CharacterSet><SingleCharacter char="|"/></CharacterSet></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Csymbol" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_PTR_OP">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:PTR_OP</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="-"/></CharacterSet><CharacterSet><SingleCharacter char="&gt;"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_Plus_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Plus_t</PP>
    <Regex><CharacterSet><SingleCharacter char="+"/></CharacterSet></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>5</Precedence>
      <LeftAssociative/>
    </Operator>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Csymbol" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_Question_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Question_t</PP>
    <Regex><CharacterSet><SingleCharacter char="?"/></CharacterSet></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_RBracket_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:RBracket_t</PP>
    <Regex><CharacterSet><SingleCharacter char="]"/></CharacterSet></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_RCurly_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:RCurly_t</PP>
    <Regex><CharacterSet><SingleCharacter char="}"/></CharacterSet></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
edu_umn_cs_melt_ableC_concretesyntax_context = ((common.ConsCell)core.Ptail.invoke(edu_umn_cs_melt_ableC_concretesyntax_context));
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_RIGHT_ASSIGN">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:RIGHT_ASSIGN</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="&gt;"/></CharacterSet><CharacterSet><SingleCharacter char="&gt;"/></CharacterSet><CharacterSet><SingleCharacter char="="/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Cassignment" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_RIGHT_OP">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:RIGHT_OP</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="&gt;"/></CharacterSet><CharacterSet><SingleCharacter char="&gt;"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Csymbol" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:RParen_t</PP>
    <Regex><CharacterSet><SingleCharacter char=")"/></CharacterSet></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>1</Precedence>
      <LeftAssociative/>
    </Operator>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_Register_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Register_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="g"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_Restrict_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Restrict_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_Return_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Return_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_SIZEOF">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:SIZEOF</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="z"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="f"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_STRUCT">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:STRUCT</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_SUB_ASSIGN">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:SUB_ASSIGN</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="-"/></CharacterSet><CharacterSet><SingleCharacter char="="/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Cassignment" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_SWITCH">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:SWITCH</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="w"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="h"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_Semi_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Semi_t</PP>
    <Regex><CharacterSet><SingleCharacter char=";"/></CharacterSet></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_Short_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Short_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="h"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_Signed_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Signed_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="g"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_Star_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Star_t</PP>
    <Regex><CharacterSet><SingleCharacter char="*"/></CharacterSet></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>6</Precedence>
      <LeftAssociative/>
    </Operator>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Csymbol" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_Static_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Static_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_StringLiteral_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:StringLiteral_t</PP>
    <Regex><Concatenation><KleeneStar><CharacterSet><SingleCharacter char="U"/><SingleCharacter char="u"/><SingleCharacter char="8"/><SingleCharacter char="L"/></CharacterSet></KleeneStar><CharacterSet><SingleCharacter char="&quot;"/></CharacterSet><KleeneStar><Choice><CharacterSet invert="true"><SingleCharacter char="&quot;"/></CharacterSet><Concatenation><CharacterSet><SingleCharacter char="\"/></CharacterSet><CharacterSet><SingleCharacter char="&quot;"/></CharacterSet></Concatenation></Choice></KleeneStar><CharacterSet><SingleCharacter char="&quot;"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Cliteral" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_Tilde_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Tilde_t</PP>
    <Regex><CharacterSet><SingleCharacter char="~"/></CharacterSet></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Csymbol" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_TypeName_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:TypeName_t</PP>
    <Regex><Concatenation><CharacterSet><CharacterRange lower="A" upper="Z"/><CharacterRange lower="a" upper="z"/><SingleCharacter char="_"/><SingleCharacter char="$"/></CharacterSet><KleeneStar><CharacterSet><CharacterRange lower="A" upper="Z"/><CharacterRange lower="a" upper="z"/><SingleCharacter char="_"/><CharacterRange lower="0" upper="9"/><SingleCharacter char="$"/></CharacterSet></KleeneStar></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Cidentifier" grammar="host" /></InClasses>
    <Submits><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_Typedef_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Typedef_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="y"/></CharacterSet><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="f"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_UNION">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:UNION</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_Unsigned_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Unsigned_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="g"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_Void_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Void_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="v"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_Volatile_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Volatile_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="v"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_WHILE">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:WHILE</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="w"/></CharacterSet><CharacterSet><SingleCharacter char="h"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_WhiteSpace">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:WhiteSpace</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="&#10;"/><SingleCharacter char="&#9;"/><SingleCharacter char=" "/></CharacterSet><KleeneStar><CharacterSet><SingleCharacter char="&#10;"/><SingleCharacter char="&#9;"/><SingleCharacter char=" "/></CharacterSet></KleeneStar></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ccomment" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_XOR_ASSIGN">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:XOR_ASSIGN</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="^"/></CharacterSet><CharacterSet><SingleCharacter char="="/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Cassignment" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_Xor_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Xor_t</PP>
    <Regex><CharacterSet><SingleCharacter char="^"/></CharacterSet></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Csymbol" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_c11_C11_AlignAs_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:c11:C11_AlignAs_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="A"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="g"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_c11_C11_Alignof_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:c11:C11_Alignof_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="A"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="g"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="f"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_c11_C11_Atomic_LParen_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:c11:C11_Atomic_LParen_t</PP>
    <Regex><CharacterSet><SingleCharacter char="("/></CharacterSet></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_c11_C11_Atomic_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:c11:C11_Atomic_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="A"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="m"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_c11_C11_Generic_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:c11:C11_Generic_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="G"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_c11_C11_Noreturn_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:c11:C11_Noreturn_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="N"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_c11_C11_Static_assert_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:c11:C11_Static_assert_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="S"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_c11_C11_Thread_local_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:c11:C11_Thread_local_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="T"/></CharacterSet><CharacterSet><SingleCharacter char="h"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_cppTags_CPP_Location_Tag_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:cppTags:CPP_Location_Tag_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="#"/></CharacterSet><CharacterSet><SingleCharacter char=" "/></CharacterSet><Concatenation><CharacterSet><CharacterRange lower="0" upper="9"/></CharacterSet><KleeneStar><CharacterSet><CharacterRange lower="0" upper="9"/></CharacterSet></KleeneStar></Concatenation><CharacterSet><SingleCharacter char=" "/></CharacterSet><CharacterSet><SingleCharacter char="&quot;"/></CharacterSet><Concatenation><CharacterSet invert="true"><SingleCharacter char="&quot;"/></CharacterSet><KleeneStar><CharacterSet invert="true"><SingleCharacter char="&quot;"/></CharacterSet></KleeneStar></Concatenation><CharacterSet><SingleCharacter char="&quot;"/></CharacterSet><KleeneStar><CharacterSet><SingleCharacter char=" "/><CharacterRange lower="0" upper="9"/></CharacterSet></KleeneStar><CharacterSet><SingleCharacter char="&#10;"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
virtualLocation.setFileName(((common.StringCatter)core.Psubstring.invoke(Integer.valueOf(((Integer)core.PindexOf.invoke((new common.StringCatter("\"")), new common.StringCatter(lexeme))) + Integer.valueOf((int)1)), ((Integer)core.PlastIndexOf.invoke((new common.StringCatter("\"")), new common.StringCatter(lexeme))), new common.StringCatter(lexeme))).toString());
virtualLocation.setLine(Integer.valueOf(((common.StringCatter)core.Psubstring.invoke(Integer.valueOf((int)2), Integer.valueOf(((Integer)core.PindexOf.invoke((new common.StringCatter("\"")), new common.StringCatter(lexeme))) - Integer.valueOf((int)1)), new common.StringCatter(lexeme))).toString()));
virtualLocation.setColumn(Integer.valueOf((int)0));
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_cppTags_Hash_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:cppTags:Hash_t</PP>
    <Regex><CharacterSet><SingleCharacter char="#"/></CharacterSet></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_cppTags_Space_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:cppTags:Space_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char=" "/></CharacterSet><KleeneStar><CharacterSet><SingleCharacter char=" "/></CharacterSet></KleeneStar></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Asm_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:Asm_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="m"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Asm_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:CPP_Asm_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="m"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Attr_LowerPrec_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:CPP_Attr_LowerPrec_t</PP>
    <Regex><EmptyString/></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>5</Precedence>
      <NonAssociative/>
    </Operator>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Attribute_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:CPP_Attribute_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="b"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet></Concatenation></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>10</Precedence>
      <NonAssociative/>
    </Operator>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Extension_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:CPP_Extension_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="x"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Inline_OneSided_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:CPP_Inline_OneSided_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Inline_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:CPP_Inline_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Signed_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:CPP_Signed_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="g"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Typeof_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:CPP_Typeof_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="y"/></CharacterSet><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="f"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_UUAsm_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:CPP_UUAsm_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="m"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_UUAttribute_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:CPP_UUAttribute_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="b"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet></Concatenation></Regex>
    <Operator>
      <Class>main</Class>
      <Precedence>10</Precedence>
      <NonAssociative/>
    </Operator>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_UUTypeof_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:CPP_UUTypeof_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="y"/></CharacterSet><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="f"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_UUVolatile_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:CPP_UUVolatile_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="v"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Volatile_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:CPP_Volatile_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="v"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_AlignOfUU_T">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:GNU_AlignOfUU_T</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="g"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="f"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_AlignOf_T">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:GNU_AlignOf_T</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="g"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="f"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_BuiltinOffsetof_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:GNU_BuiltinOffsetof_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="b"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="f"/></CharacterSet><CharacterSet><SingleCharacter char="f"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="f"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_BuiltinTypesCompatible_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:GNU_BuiltinTypesCompatible_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="b"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="y"/></CharacterSet><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="m"/></CharacterSet><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="b"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="p"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_BuiltinVaArg_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:GNU_BuiltinVaArg_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="b"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="v"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="g"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_UUImagUU_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:GNU_UUImagUU_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="m"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="g"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_UUImag_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:GNU_UUImag_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="m"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="g"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_UULabel_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:GNU_UULabel_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="b"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_UURealUU_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:GNU_UURealUU_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_UUReal_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:GNU_UUReal_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_ImaginaryFloatConstant_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:ImaginaryFloatConstant_t</PP>
    <Regex><Concatenation><Choice><Concatenation><Concatenation><CharacterSet><CharacterRange lower="0" upper="9"/></CharacterSet><KleeneStar><CharacterSet><CharacterRange lower="0" upper="9"/></CharacterSet></KleeneStar></Concatenation><CharacterSet><SingleCharacter char="."/></CharacterSet><KleeneStar><CharacterSet><CharacterRange lower="0" upper="9"/></CharacterSet></KleeneStar></Concatenation><Choice><Concatenation><KleeneStar><CharacterSet><CharacterRange lower="0" upper="9"/></CharacterSet></KleeneStar><CharacterSet><SingleCharacter char="."/></CharacterSet><Concatenation><CharacterSet><CharacterRange lower="0" upper="9"/></CharacterSet><KleeneStar><CharacterSet><CharacterRange lower="0" upper="9"/></CharacterSet></KleeneStar></Concatenation></Concatenation><Concatenation><CharacterSet><CharacterRange lower="0" upper="9"/></CharacterSet><KleeneStar><CharacterSet><CharacterRange lower="0" upper="9"/></CharacterSet></KleeneStar></Concatenation></Choice></Choice><Choice><Concatenation><CharacterSet><SingleCharacter char="E"/><SingleCharacter char="e"/></CharacterSet><Choice><CharacterSet><SingleCharacter char="+"/><SingleCharacter char="-"/></CharacterSet><EmptyString/></Choice><Concatenation><CharacterSet><CharacterRange lower="0" upper="9"/></CharacterSet><KleeneStar><CharacterSet><CharacterRange lower="0" upper="9"/></CharacterSet></KleeneStar></Concatenation></Concatenation><EmptyString/></Choice><KleeneStar><CharacterSet><SingleCharacter char="F"/><SingleCharacter char="L"/><SingleCharacter char="f"/><SingleCharacter char="l"/></CharacterSet></KleeneStar><CharacterSet><SingleCharacter char="I"/><SingleCharacter char="i"/><SingleCharacter char="J"/><SingleCharacter char="j"/></CharacterSet><KleeneStar><CharacterSet><SingleCharacter char="F"/><SingleCharacter char="L"/><SingleCharacter char="f"/><SingleCharacter char="l"/></CharacterSet></KleeneStar></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Cliteral" grammar="host" /></InClasses>
    <Submits><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_FloatConstant_t" grammar="host" /></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_ImaginaryHexFloatConst_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:ImaginaryHexFloatConst_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="0"/></CharacterSet><CharacterSet><SingleCharacter char="x"/><SingleCharacter char="X"/></CharacterSet><Choice><Concatenation><Concatenation><CharacterSet><CharacterRange lower="a" upper="f"/><CharacterRange lower="A" upper="F"/><CharacterRange lower="0" upper="9"/></CharacterSet><KleeneStar><CharacterSet><CharacterRange lower="a" upper="f"/><CharacterRange lower="A" upper="F"/><CharacterRange lower="0" upper="9"/></CharacterSet></KleeneStar></Concatenation><CharacterSet><SingleCharacter char="."/></CharacterSet><KleeneStar><CharacterSet><CharacterRange lower="a" upper="f"/><CharacterRange lower="A" upper="F"/><CharacterRange lower="0" upper="9"/></CharacterSet></KleeneStar></Concatenation><Choice><Concatenation><KleeneStar><CharacterSet><CharacterRange lower="a" upper="f"/><CharacterRange lower="A" upper="F"/><CharacterRange lower="0" upper="9"/></CharacterSet></KleeneStar><CharacterSet><SingleCharacter char="."/></CharacterSet><Concatenation><CharacterSet><CharacterRange lower="a" upper="f"/><CharacterRange lower="A" upper="F"/><CharacterRange lower="0" upper="9"/></CharacterSet><KleeneStar><CharacterSet><CharacterRange lower="a" upper="f"/><CharacterRange lower="A" upper="F"/><CharacterRange lower="0" upper="9"/></CharacterSet></KleeneStar></Concatenation></Concatenation><Concatenation><CharacterSet><CharacterRange lower="a" upper="f"/><CharacterRange lower="A" upper="F"/><CharacterRange lower="0" upper="9"/></CharacterSet><KleeneStar><CharacterSet><CharacterRange lower="a" upper="f"/><CharacterRange lower="A" upper="F"/><CharacterRange lower="0" upper="9"/></CharacterSet></KleeneStar></Concatenation></Choice></Choice><Choice><Concatenation><CharacterSet><SingleCharacter char="P"/><SingleCharacter char="p"/></CharacterSet><Choice><CharacterSet><SingleCharacter char="+"/><SingleCharacter char="-"/></CharacterSet><EmptyString/></Choice><Concatenation><CharacterSet><CharacterRange lower="0" upper="9"/></CharacterSet><KleeneStar><CharacterSet><CharacterRange lower="0" upper="9"/></CharacterSet></KleeneStar></Concatenation></Concatenation><EmptyString/></Choice><KleeneStar><CharacterSet><SingleCharacter char="F"/><SingleCharacter char="L"/><SingleCharacter char="f"/><SingleCharacter char="l"/></CharacterSet></KleeneStar><CharacterSet><SingleCharacter char="I"/><SingleCharacter char="i"/><SingleCharacter char="J"/><SingleCharacter char="j"/></CharacterSet><KleeneStar><CharacterSet><SingleCharacter char="F"/><SingleCharacter char="L"/><SingleCharacter char="f"/><SingleCharacter char="l"/></CharacterSet></KleeneStar></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Cliteral" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Pack_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:Pack_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="k"/></CharacterSet><CharacterSet><SingleCharacter char="("/></CharacterSet><KleeneStar><CharacterSet invert="true"><SingleCharacter char=")"/></CharacterSet></KleeneStar><CharacterSet><SingleCharacter char=")"/></CharacterSet><CharacterSet><SingleCharacter char="&#10;"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_PragmaMark">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:PragmaMark</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="#"/></CharacterSet><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="g"/></CharacterSet><CharacterSet><SingleCharacter char="m"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char=" "/></CharacterSet><CharacterSet><SingleCharacter char="m"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="k"/></CharacterSet><KleeneStar><CharacterSet invert="true"><SingleCharacter char="&#10;"/></CharacterSet></KleeneStar><CharacterSet><SingleCharacter char="&#10;"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ccomment" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Pragma_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:Pragma_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="g"/></CharacterSet><CharacterSet><SingleCharacter char="m"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_RedefExtname_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:RedefExtname_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="d"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="f"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="x"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="m"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Typeof_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:Typeof_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="y"/></CharacterSet><CharacterSet><SingleCharacter char="p"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="f"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_UUBuiltinVAList_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:UUBuiltinVAList_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="b"/></CharacterSet><CharacterSet><SingleCharacter char="u"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="v"/></CharacterSet><CharacterSet><SingleCharacter char="a"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="l"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_UUConst_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:UUConst_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="o"/></CharacterSet><CharacterSet><SingleCharacter char="n"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_UURestrictUU_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:UURestrictUU_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <Terminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_UURestrict_t">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:UURestrict_t</PP>
    <Regex><Concatenation><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="_"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="e"/></CharacterSet><CharacterSet><SingleCharacter char="s"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet><CharacterSet><SingleCharacter char="r"/></CharacterSet><CharacterSet><SingleCharacter char="i"/></CharacterSet><CharacterSet><SingleCharacter char="c"/></CharacterSet><CharacterSet><SingleCharacter char="t"/></CharacterSet></Concatenation></Regex>
    <Type>common.TerminalRecord</Type>
    <Code><![CDATA[
RESULT = new common.TerminalRecord(lexeme,virtualLocation,(int)getStartRealLocation().getPos(),(int)getEndRealLocation().getPos());
  addToken(_terminal);
  shiftPTNode(RESULT, _terminal);
]]></Code>
    <InClasses><TerminalClassRef id="edu_umn_cs_melt_ableC_concretesyntax_Ckeyword" grammar="host" /></InClasses>
    <Submits></Submits>
    <Dominates></Dominates>
  </Terminal>
  <DisambiguationFunction id="edu_umn_cs_melt_ableC_concretesyntax___disam39">
    <Members><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Identifier_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeName_t" grammar="host" /></Members>
    <Code><![CDATA[
return (Integer)((Object)(new common.Thunk<Object>(context) { public final Object doEval() { final common.Thunk<Object> __SV_LOCAL___fail_2448 = new common.Thunk<Object>(context) { public final Object doEval() { return edu_umn_cs_melt_ableC_concretesyntax_Identifier_t; } };
return new common.PatternLazy<common.DecoratedNode, Object>() { public final Object eval(final common.DecoratedNode context, common.DecoratedNode scrutineeIter) {while(true) {final common.DecoratedNode scrutinee = scrutineeIter; final common.Node scrutineeNode = scrutinee.undecorate(); if(scrutineeNode instanceof core.Pjust) { final common.Thunk<Object> __SV_LOCAL___sv_tmp_pv_2456 = new common.Thunk<Object>(context) { public final Object doEval() { return (Object)scrutinee.childAsIs(0); } };
 return (Object)new common.PatternLazy<common.DecoratedNode, Object>() { public final Object eval(final common.DecoratedNode context, common.DecoratedNode scrutineeIter) {while(true) {final common.DecoratedNode scrutinee = scrutineeIter; final common.Node scrutineeNode = scrutinee.undecorate(); if(scrutineeNode instanceof edu.umn.cs.melt.ableC.concretesyntax.PtypenameType_c) {  return (Object)edu_umn_cs_melt_ableC_concretesyntax_TypeName_t; }if(!scrutineeIter.undecorate().hasForward()) break;scrutineeIter = scrutineeIter.forward();}return ((Object)(__SV_LOCAL___fail_2448.eval()));}}.eval(context, (common.DecoratedNode)((edu.umn.cs.melt.ableC.concretesyntax.NIdentType)(__SV_LOCAL___sv_tmp_pv_2456.eval())).decorate(context, (common.Lazy[])null)); }if(!scrutineeIter.undecorate().hasForward()) break;scrutineeIter = scrutineeIter.forward();}return ((Object)(__SV_LOCAL___fail_2448.eval()));}}.eval(context, (common.DecoratedNode)((core.NMaybe)core.PlookupBy.invoke(core.PstringEq.factory, new common.StringCatter(lexeme), ((common.ConsCell)core.Phead.invoke(edu_umn_cs_melt_ableC_concretesyntax_context)))).decorate(context, (common.Lazy[])null)); } }).eval());
]]></Code>
  </DisambiguationFunction>
  <DisambiguationFunction id="edu_umn_cs_melt_ableC_concretesyntax_c11___disam98">
    <Members><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_c11_C11_Atomic_LParen_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /></Members>
    <Code><![CDATA[
return (Integer)edu_umn_cs_melt_ableC_concretesyntax_c11_C11_Atomic_LParen_t;
]]></Code>
  </DisambiguationFunction>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_AbstractDeclarator_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:AbstractDeclarator_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NAbstractDeclarator_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_287_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_287_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AbstractDeclarator_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Pointer_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_283_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_283_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AbstractDeclarator_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectAbstractDeclarator_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_278_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_278_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AbstractDeclarator_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Pointer_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectAbstractDeclarator_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_AddMulLeftOp_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:AddMulLeftOp_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NAddMulLeftOp_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_189_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_189_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AddMulLeftOp_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AddMulLeft_NEVER_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_AddMulLeft_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:AddMulLeft_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NAddMulLeft_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_180_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_180_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AddMulLeft_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AddMulLeft_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AddMulLeftOp_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AddMulRight_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_178_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_178_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AddMulLeft_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AddMulRight_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_AddMulNoneOp_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:AddMulNoneOp_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NAddMulNoneOp_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_227_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_227_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AddMulNoneOp_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AddMulNone_NEVER_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_AddMulNone_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:AddMulNone_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NAddMulNone_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_218_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_218_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AddMulNone_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_MultiplicativeExpr_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AddMulNoneOp_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_MultiplicativeExpr_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_216_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_216_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AddMulNone_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_MultiplicativeExpr_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_AddMulRightOp_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:AddMulRightOp_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NAddMulRightOp_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_208_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_208_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AddMulRightOp_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AddMulRight_NEVER_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_AddMulRight_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:AddMulRight_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NAddMulRight_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_199_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_199_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AddMulRight_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AddMulNone_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AddMulRightOp_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AddMulRight_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_197_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_197_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AddMulRight_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AddMulNone_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_AdditiveExpr_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:AdditiveExpr_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NAdditiveExpr_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_151_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_151_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AdditiveExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AdditiveExpr_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AdditiveOp_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AddMulLeft_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_149_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_149_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AdditiveExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AddMulLeft_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_AdditiveOp_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:AdditiveOp_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NAdditiveOp_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_168_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_168_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AdditiveOp_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Minus_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_164_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_164_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AdditiveOp_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Plus_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_AndExpr_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:AndExpr_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NAndExpr_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_99_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_99_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AndExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AndExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_And_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_EqualityExpr_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_97_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_97_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AndExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_EqualityExpr_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_ArgumentExprList_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:ArgumentExprList_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NArgumentExprList_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_312_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_312_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ArgumentExprList_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ArgumentExprList_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Comma_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AssignExpr_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_310_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_310_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ArgumentExprList_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AssignExpr_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_ArrayDesignator_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:ArrayDesignator_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NArrayDesignator_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsExpr_sv_64_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsExpr_sv_64_0(_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2], ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), _children[4], common.TerminalRecord.createSpan(new Object[] {_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2], ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), _children[4]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ArrayDesignator_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LBracket_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ConstantExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ELLIPSES" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ConstantExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RBracket_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_387_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_387_0(_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2], common.TerminalRecord.createSpan(new Object[] {_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ArrayDesignator_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LBracket_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ConstantExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RBracket_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_AssignExpr_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:AssignExpr_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NAssignExpr_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_17_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_17_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AssignExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_UnaryExpr_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AssignOp_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AssignExpr_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_15_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_15_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AssignExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ConditionalExpr_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_AssignOp_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:AssignOp_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NAssignOp_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_52_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_52_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AssignOp_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_OR_ASSIGN" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_51_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_51_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AssignOp_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_XOR_ASSIGN" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_50_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_50_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AssignOp_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AND_ASSIGN" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_49_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_49_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AssignOp_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RIGHT_ASSIGN" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_48_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_48_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AssignOp_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LEFT_ASSIGN" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_47_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_47_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AssignOp_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_SUB_ASSIGN" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_46_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_46_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AssignOp_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ADD_ASSIGN" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_45_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_45_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AssignOp_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_MOD_ASSIGN" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_44_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_44_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AssignOp_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DIV_ASSIGN" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_43_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_43_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AssignOp_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_MUL_ASSIGN" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_42_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_42_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AssignOp_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Assign_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_BlockItemList_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:BlockItemList_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NBlockItemList_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_19_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_19_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_BlockItemList_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_BlockItemList_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_BlockItem_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_17_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_17_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_BlockItemList_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_BlockItem_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_BlockItem_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:BlockItem_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NBlockItem_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsStmts_sv_26_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsStmts_sv_26_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_BlockItem_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_NestedFunctionDefinition_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsStmts_sv_24_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsStmts_sv_24_0(_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_BlockItem_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Extension_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Declaration_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_27_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_27_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_BlockItem_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Stmt_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_25_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_25_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_BlockItem_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Declaration_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_CastExpr_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:CastExpr_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NCastExpr_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_254_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_254_0(_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2], ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2], ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_CastExpr_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeName_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_CastExpr_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_252_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_252_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_CastExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_UnaryExpr_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_CompoundStatement_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:CompoundStatement_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NCompoundStatement_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_localLabelsCompoundBlock_c">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PlocalLabelsCompoundBlock_c(_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], common.TerminalRecord.createSpan(new Object[] {_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_CompoundStatement_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LCurly_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_LabelDeclarations_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_BlockItemList_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RCurly_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_9_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_9_0(_children[0], _children[1], common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_CompoundStatement_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LCurly_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RCurly_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_7_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_7_0(_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2], common.TerminalRecord.createSpan(new Object[] {_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_CompoundStatement_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LCurly_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_BlockItemList_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RCurly_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_ConditionalExpr_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:ConditionalExpr_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NConditionalExpr_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsExpr_sv_12_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsExpr_sv_12_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2], ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2], ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ConditionalExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LogicalOrExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Question_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Colon_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ConditionalExpr_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_59_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_59_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ConditionalExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LogicalOrExpr_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_57_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_57_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ConditionalExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LogicalOrExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Question_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Expr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Colon_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ConditionalExpr_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_ConstantExpr_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:ConstantExpr_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NConstantExpr_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_23_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_23_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ConstantExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ConditionalExpr_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_DeclarationList_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:DeclarationList_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NDeclarationList_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_167_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_167_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DeclarationList_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Declaration_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DeclarationList_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_164_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_164_0(common.TerminalRecord.createSpan(new Object[] {}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DeclarationList_c" grammar="host" /></LHS>
    <RHS></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_DeclarationSpecifiers_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:DeclarationSpecifiers_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NDeclarationSpecifiers_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_167_0">
    <Class>main</Class>
    <Precedence>10</Precedence>
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_167_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DeclarationSpecifiers_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Attributes_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_159_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_159_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DeclarationSpecifiers_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Attributes_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DeclarationSpecifiers_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_c11_P_edu_umn_cs_melt_ableC_concretesyntax_c11C11_sv_19_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.c11.PP_edu_umn_cs_melt_ableC_concretesyntax_c11C11_sv_19_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DeclarationSpecifiers_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_c11_AlignmentSpecifier_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_c11_P_edu_umn_cs_melt_ableC_concretesyntax_c11C11_sv_11_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.c11.PP_edu_umn_cs_melt_ableC_concretesyntax_c11C11_sv_11_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DeclarationSpecifiers_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_c11_AlignmentSpecifier_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DeclarationSpecifiers_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_108_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_108_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DeclarationSpecifiers_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_FunctionSpecifier_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_100_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_100_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DeclarationSpecifiers_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_FunctionSpecifier_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DeclarationSpecifiers_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_92_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_92_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DeclarationSpecifiers_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeQualifier_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_84_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_84_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DeclarationSpecifiers_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeQualifier_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DeclarationSpecifiers_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_76_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_76_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DeclarationSpecifiers_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeSpecifier_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_68_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_68_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DeclarationSpecifiers_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeSpecifier_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DeclarationSpecifiers_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_60_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_60_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DeclarationSpecifiers_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StorageClassSpecifier_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_52_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_52_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DeclarationSpecifiers_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StorageClassSpecifier_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DeclarationSpecifiers_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_Declaration_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Declaration_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NDeclaration_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_c11_P_edu_umn_cs_melt_ableC_concretesyntax_c11C11_sv_139_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.c11.PP_edu_umn_cs_melt_ableC_concretesyntax_c11C11_sv_139_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Declaration_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_c11_StaticAssertDeclaration_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_66_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_66_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Declaration_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DeclarationSpecifiers_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_42_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_42_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2]}, virtualLocation, (int)_pos.getPos())));
edu_umn_cs_melt_ableC_concretesyntax_context = (((Boolean)((edu.umn.cs.melt.ableC.concretesyntax.NDeclarationSpecifiers_c)((common.Node)RESULT).getChild(edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_42_0.i_ds)).decorate(context, (common.Lazy[])null).synthesized(edu.umn.cs.melt.ableC.concretesyntax.Init.edu_umn_cs_melt_ableC_concretesyntax_isTypedef__ON__edu_umn_cs_melt_ableC_concretesyntax_DeclarationSpecifiers_c)) ? ((common.ConsCell)edu.umn.cs.melt.ableC.concretesyntax.PaddTypenamesToScope.invoke(((common.ConsCell)((edu.umn.cs.melt.ableC.concretesyntax.NInitDeclaratorList_c)((common.Node)RESULT).getChild(edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_42_0.i_idcl)).decorate(context, (common.Lazy[])null).synthesized(edu.umn.cs.melt.ableC.concretesyntax.Init.edu_umn_cs_melt_ableC_concretesyntax_declaredIdents__ON__edu_umn_cs_melt_ableC_concretesyntax_InitDeclaratorList_c)), edu_umn_cs_melt_ableC_concretesyntax_context)) : ((common.ConsCell)edu.umn.cs.melt.ableC.concretesyntax.PaddIdentsToScope.invoke(((common.ConsCell)((edu.umn.cs.melt.ableC.concretesyntax.NInitDeclaratorList_c)((common.Node)RESULT).getChild(edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_42_0.i_idcl)).decorate(context, (common.Lazy[])null).synthesized(edu.umn.cs.melt.ableC.concretesyntax.Init.edu_umn_cs_melt_ableC_concretesyntax_declaredIdents__ON__edu_umn_cs_melt_ableC_concretesyntax_InitDeclaratorList_c)), edu_umn_cs_melt_ableC_concretesyntax_context)));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Declaration_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DeclarationSpecifiers_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_InitDeclaratorList_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Semi_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_Declarator_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Declarator_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NDeclarator_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_82_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_82_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Declarator_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectDeclarator_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_76_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_76_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Declarator_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Pointer_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectDeclarator_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_Designation_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Designation_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NDesignation_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsExpr_sv_60_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsExpr_sv_60_0(_children[0], _children[1], common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Designation_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Identifier_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Colon_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsExpr_sv_57_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsExpr_sv_57_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Designation_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ArrayDesignator_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_360_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_360_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Designation_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DesignatorList_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Assign_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_DesignatorList_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:DesignatorList_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NDesignatorList_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_370_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_370_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DesignatorList_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Designator_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_367_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_367_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DesignatorList_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DesignatorList_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Designator_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_Designator_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Designator_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NDesignator_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_380_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_380_0(_children[0], _children[1], common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Designator_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Dot_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Identifier_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_378_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_378_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Designator_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ArrayDesignator_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_DirectAbstractDeclarator_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:DirectAbstractDeclarator_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NDirectAbstractDeclarator_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_341_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_341_0(_children[0], _children[1], common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectAbstractDeclarator_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_336_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_336_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectAbstractDeclarator_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectAbstractDeclarator_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_332_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_332_0(_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2], common.TerminalRecord.createSpan(new Object[] {_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectAbstractDeclarator_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ParameterTypeList_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_327_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_327_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectAbstractDeclarator_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectAbstractDeclarator_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ParameterTypeList_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_323_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_323_0(_children[0], _children[1], _children[2], common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], _children[2]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectAbstractDeclarator_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LBracket_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Star_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RBracket_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_318_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_318_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2], _children[3], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2], _children[3]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectAbstractDeclarator_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectAbstractDeclarator_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LBracket_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Star_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RBracket_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_314_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_314_0(_children[0], _children[1], common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectAbstractDeclarator_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LBracket_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RBracket_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_309_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_309_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectAbstractDeclarator_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectAbstractDeclarator_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LBracket_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RBracket_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_305_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_305_0(_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2], common.TerminalRecord.createSpan(new Object[] {_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectAbstractDeclarator_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LBracket_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AssignExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RBracket_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_300_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_300_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectAbstractDeclarator_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectAbstractDeclarator_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LBracket_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AssignExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RBracket_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_295_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_295_0(_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2], common.TerminalRecord.createSpan(new Object[] {_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectAbstractDeclarator_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AbstractDeclarator_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_DirectDeclarator_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:DirectDeclarator_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NDirectDeclarator_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_267_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_267_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectDeclarator_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectDeclarator_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_260_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_260_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectDeclarator_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectDeclarator_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_IdentifierList_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_253_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_253_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectDeclarator_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectDeclarator_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ParameterTypeList_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_247_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_247_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2], _children[3], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2], _children[3]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectDeclarator_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectDeclarator_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LBracket_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Star_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RBracket_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_241_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_241_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], _children[4], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], _children[4]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectDeclarator_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectDeclarator_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LBracket_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeQualifierList_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Star_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RBracket_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_235_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_235_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode(), _children[5], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode(), _children[5]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectDeclarator_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectDeclarator_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LBracket_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeQualifierList_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Static_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AssignExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RBracket_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_229_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_229_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2], ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), _children[4], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2], ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), _children[4]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectDeclarator_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectDeclarator_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LBracket_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Static_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AssignExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RBracket_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_223_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_223_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2], ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode(), _children[5], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2], ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode(), _children[5]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectDeclarator_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectDeclarator_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LBracket_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Static_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeQualifierList_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AssignExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RBracket_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_217_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_217_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectDeclarator_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectDeclarator_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LBracket_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RBracket_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_211_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_211_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectDeclarator_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectDeclarator_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LBracket_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeQualifierList_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RBracket_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_205_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_205_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectDeclarator_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectDeclarator_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LBracket_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AssignExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RBracket_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_199_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_199_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), _children[4], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), _children[4]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectDeclarator_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectDeclarator_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LBracket_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeQualifierList_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AssignExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RBracket_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_193_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_193_0(_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2], common.TerminalRecord.createSpan(new Object[] {_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectDeclarator_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Declarator_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_188_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_188_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DirectDeclarator_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Identifier_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_EnumSpecifier_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:EnumSpecifier_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NEnumSpecifier_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_321_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_321_0(_children[0], _children[1], common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_EnumSpecifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ENUM" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Identifier_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_319_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_319_0(_children[0], _children[1], _children[2], ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), _children[4], _children[5], common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], _children[2], ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), _children[4], _children[5]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_EnumSpecifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ENUM" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Identifier_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LCurly_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_EnumeratorList_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Comma_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RCurly_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_317_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_317_0(_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], _children[4], common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], _children[4]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_EnumSpecifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ENUM" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LCurly_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_EnumeratorList_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Comma_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RCurly_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_315_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_315_0(_children[0], _children[1], _children[2], ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), _children[4], common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], _children[2], ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), _children[4]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_EnumSpecifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ENUM" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Identifier_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LCurly_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_EnumeratorList_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RCurly_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_313_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_313_0(_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_EnumSpecifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ENUM" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LCurly_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_EnumeratorList_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RCurly_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_EnumeratorList_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:EnumeratorList_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NEnumeratorList_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_329_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_329_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_EnumeratorList_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_EnumeratorList_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Comma_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Enumerator_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_327_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_327_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_EnumeratorList_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Enumerator_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_Enumerator_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Enumerator_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NEnumerator_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_337_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_337_0(_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Enumerator_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Identifier_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Assign_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ConstantExpr_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_335_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_335_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Enumerator_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Identifier_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_EqualityExpr_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:EqualityExpr_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NEqualityExpr_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_109_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_109_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_EqualityExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_EqualityExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_NonEquality_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RelationalExpr_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_107_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_107_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_EqualityExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_EqualityExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Equality_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RelationalExpr_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_105_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_105_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_EqualityExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RelationalExpr_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_ExclusiveOrExpr_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:ExclusiveOrExpr_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NExclusiveOrExpr_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_91_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_91_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ExclusiveOrExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ExclusiveOrExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Xor_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AndExpr_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_89_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_89_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ExclusiveOrExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AndExpr_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_ExprStmt_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:ExprStmt_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NExprStmt_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_64_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_64_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ExprStmt_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Expr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_61_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_61_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ExprStmt_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Semi_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_Expr_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Expr_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NExpr_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_9_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_9_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Expr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AssignExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Comma_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Expr_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_7_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_7_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Expr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AssignExpr_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_ExternalDeclaration_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:ExternalDeclaration_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NExternalDeclaration_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_26_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_26_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ExternalDeclaration_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_SimpleAsmStatement_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_24_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_24_0(_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ExternalDeclaration_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Extension_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ExternalDeclaration_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_22_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_22_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ExternalDeclaration_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsPragma_sv_15_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsPragma_sv_15_0(_children[0], _children[1], _children[2], _children[3], _children[4], common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], _children[2], _children[3], _children[4]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ExternalDeclaration_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_cppTags_Hash_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Pragma_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_RedefExtname_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Identifier_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Identifier_t" grammar="host" /></RHS>
    <Layout><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_cppTags_Space_t" grammar="host" /></Layout>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsPragma_sv_12_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsPragma_sv_12_0(_children[0], _children[1], _children[2], common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], _children[2]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ExternalDeclaration_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_cppTags_Hash_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Pragma_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Pack_t" grammar="host" /></RHS>
    <Layout><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_cppTags_Space_t" grammar="host" /></Layout>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxRoot_sv_26_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxRoot_sv_26_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ExternalDeclaration_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_FunctionDefinition_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxRoot_sv_24_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxRoot_sv_24_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ExternalDeclaration_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Declaration_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_FunctionDefinition_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:FunctionDefinition_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NFunctionDefinition_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_31_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_31_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
edu_umn_cs_melt_ableC_concretesyntax_context = ((common.ConsCell)edu.umn.cs.melt.ableC.concretesyntax.PcloseScope.invoke(edu_umn_cs_melt_ableC_concretesyntax_context));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_FunctionDefinition_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_InitialFunctionDefinition_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_CompoundStatement_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_FunctionSpecifier_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:FunctionSpecifier_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NFunctionSpecifier_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_32_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_32_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_FunctionSpecifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Inline_OneSided_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_30_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_30_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_FunctionSpecifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Inline_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_c11_P_edu_umn_cs_melt_ableC_concretesyntax_c11C11_sv_48_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.c11.PP_edu_umn_cs_melt_ableC_concretesyntax_c11C11_sv_48_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_FunctionSpecifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_c11_C11_Noreturn_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_242_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_242_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_FunctionSpecifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Inline_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_IdentifierList_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:IdentifierList_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NIdentifierList_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_404_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_404_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_IdentifierList_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_IdentifierList_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Comma_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Identifier_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_402_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_402_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_IdentifierList_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Identifier_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_InclusiveOrExpr_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:InclusiveOrExpr_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NInclusiveOrExpr_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_83_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_83_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_InclusiveOrExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_InclusiveOrExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Or_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ExclusiveOrExpr_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_81_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_81_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_InclusiveOrExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ExclusiveOrExpr_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_InitDeclaratorList_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:InitDeclaratorList_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NInitDeclaratorList_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_413_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_413_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_InitDeclaratorList_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_InitDeclaratorList_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Comma_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_InitDeclarator_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_410_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_410_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_InitDeclaratorList_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_InitDeclarator_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_InitDeclarator_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:InitDeclarator_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NInitDeclarator_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_148_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_148_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_InitDeclarator_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Declarator_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_SimpleAsmStatement_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Attributes_c" grammar="host" /></RHS>
    <Operator><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Cpp_Attribute_high_prec" grammar="host" /></Operator>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_140_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_140_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_InitDeclarator_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Declarator_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_SimpleAsmStatement_c" grammar="host" /></RHS>
    <Operator><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Cpp_Attribute_high_prec" grammar="host" /></Operator>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_133_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_133_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2], ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2], ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_InitDeclarator_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Declarator_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Attributes_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Assign_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Initializer_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_125_0">
    <Class>main</Class>
    <Precedence>20</Precedence>
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_125_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_InitDeclarator_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Declarator_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Attributes_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_426_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_426_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_InitDeclarator_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Declarator_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Assign_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Initializer_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_420_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_420_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_InitDeclarator_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Declarator_c" grammar="host" /></RHS>
    <Operator><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Cpp_Attribute_high_prec" grammar="host" /></Operator>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_InitialFunctionDefinition_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:InitialFunctionDefinition_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NInitialFunctionDefinition_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_118_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_118_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_InitialFunctionDefinition_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Declarator_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Attributes_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_106_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_106_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_InitialFunctionDefinition_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DeclarationSpecifiers_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Declarator_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Attributes_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_138_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_138_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
edu_umn_cs_melt_ableC_concretesyntax_context = ((common.ConsCell)edu.umn.cs.melt.ableC.concretesyntax.PbeginFunctionScope.invoke(((edu.umn.cs.melt.ableC.abstractsyntax.NName)((edu.umn.cs.melt.ableC.concretesyntax.NDeclarator_c)((common.Node)RESULT).getChild(edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_138_0.i_d)).decorate(context, (common.Lazy[])null).synthesized(edu.umn.cs.melt.ableC.concretesyntax.Init.edu_umn_cs_melt_ableC_concretesyntax_declaredIdent__ON__edu_umn_cs_melt_ableC_concretesyntax_Declarator_c)), ((core.NMaybe)((edu.umn.cs.melt.ableC.concretesyntax.NDeclarator_c)((common.Node)RESULT).getChild(edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_138_0.i_d)).decorate(context, (common.Lazy[])null).synthesized(edu.umn.cs.melt.ableC.concretesyntax.Init.edu_umn_cs_melt_ableC_concretesyntax_declaredParamIdents__ON__edu_umn_cs_melt_ableC_concretesyntax_Declarator_c)), edu_umn_cs_melt_ableC_concretesyntax_context));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_InitialFunctionDefinition_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Declarator_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DeclarationList_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_122_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_122_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
edu_umn_cs_melt_ableC_concretesyntax_context = ((common.ConsCell)edu.umn.cs.melt.ableC.concretesyntax.PbeginFunctionScope.invoke(((edu.umn.cs.melt.ableC.abstractsyntax.NName)((edu.umn.cs.melt.ableC.concretesyntax.NDeclarator_c)((common.Node)RESULT).getChild(edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_122_0.i_d)).decorate(context, (common.Lazy[])null).synthesized(edu.umn.cs.melt.ableC.concretesyntax.Init.edu_umn_cs_melt_ableC_concretesyntax_declaredIdent__ON__edu_umn_cs_melt_ableC_concretesyntax_Declarator_c)), ((core.NMaybe)((edu.umn.cs.melt.ableC.concretesyntax.NDeclarator_c)((common.Node)RESULT).getChild(edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_122_0.i_d)).decorate(context, (common.Lazy[])null).synthesized(edu.umn.cs.melt.ableC.concretesyntax.Init.edu_umn_cs_melt_ableC_concretesyntax_declaredParamIdents__ON__edu_umn_cs_melt_ableC_concretesyntax_Declarator_c)), edu_umn_cs_melt_ableC_concretesyntax_context));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_InitialFunctionDefinition_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DeclarationSpecifiers_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Declarator_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DeclarationList_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_InitializerList_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:InitializerList_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NInitializerList_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_354_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_354_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_InitializerList_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_InitializerList_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Comma_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Designation_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Initializer_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_352_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_352_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_InitializerList_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_InitializerList_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Comma_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Initializer_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_350_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_350_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_InitializerList_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Designation_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Initializer_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_348_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_348_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_InitializerList_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Initializer_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_Initializer_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Initializer_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NInitializer_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsExpr_sv_53_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsExpr_sv_53_0(_children[0], _children[1], common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Initializer_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LCurly_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RCurly_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_33_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_33_0(_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2], _children[3], common.TerminalRecord.createSpan(new Object[] {_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2], _children[3]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Initializer_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LCurly_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_InitializerList_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Comma_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RCurly_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_31_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_31_0(_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2], common.TerminalRecord.createSpan(new Object[] {_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Initializer_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LCurly_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_InitializerList_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RCurly_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_29_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_29_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Initializer_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AssignExpr_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_IterationStmt_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:IterationStmt_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NIterationStmt_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_93_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_93_0(_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), _children[4], ((AdaptiveEnhancedParseTreeInnerNode)_children[5]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), _children[4], ((AdaptiveEnhancedParseTreeInnerNode)_children[5]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_IterationStmt_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_FOR" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Declaration_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ExprStmt_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Stmt_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_91_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_91_0(_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode(), _children[5], ((AdaptiveEnhancedParseTreeInnerNode)_children[6]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode(), _children[5], ((AdaptiveEnhancedParseTreeInnerNode)_children[6]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_IterationStmt_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_FOR" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Declaration_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ExprStmt_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Expr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Stmt_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_88_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_88_0(_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), _children[4], ((AdaptiveEnhancedParseTreeInnerNode)_children[5]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), _children[4], ((AdaptiveEnhancedParseTreeInnerNode)_children[5]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_IterationStmt_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_FOR" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ExprStmt_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ExprStmt_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Stmt_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_86_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_86_0(_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode(), _children[5], ((AdaptiveEnhancedParseTreeInnerNode)_children[6]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode(), _children[5], ((AdaptiveEnhancedParseTreeInnerNode)_children[6]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_IterationStmt_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_FOR" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ExprStmt_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ExprStmt_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Expr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Stmt_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_83_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_83_0(_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2], _children[3], ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode(), _children[5], common.TerminalRecord.createSpan(new Object[] {_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2], _children[3], ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode(), _children[5]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_IterationStmt_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DO" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Stmt_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_WHILE" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Expr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_81_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_81_0(_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_IterationStmt_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_WHILE" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Expr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Stmt_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_JumpStmt_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:JumpStmt_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NJumpStmt_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsStmts_sv_33_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsStmts_sv_33_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2], ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), _children[4], _children[5], _children[6], _children[7], ((AdaptiveEnhancedParseTreeInnerNode)_children[8]).getLangSpecNode(), _children[9], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2], ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), _children[4], _children[5], _children[6], _children[7], ((AdaptiveEnhancedParseTreeInnerNode)_children[8]).getLangSpecNode(), _children[9]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_JumpStmt_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Asm_Starter_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_GOTO" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StringConstant_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Colon_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Colon_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Colon_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Colon_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_IdentifierList_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsStmts_sv_30_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsStmts_sv_30_0(_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_JumpStmt_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_GOTO" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Star_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Expr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_110_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_110_0(_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2], common.TerminalRecord.createSpan(new Object[] {_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_JumpStmt_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Return_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Expr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_108_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_108_0(_children[0], _children[1], common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_JumpStmt_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Return_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_106_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_106_0(_children[0], _children[1], common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_JumpStmt_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_BREAK" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_104_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_104_0(_children[0], _children[1], common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_JumpStmt_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_CONTINUE" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_102_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_102_0(_children[0], _children[1], _children[2], common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], _children[2]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_JumpStmt_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_GOTO" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Identifier_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Semi_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_LabeledStmt_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:LabeledStmt_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NLabeledStmt_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsStmts_sv_41_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsStmts_sv_41_0(_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2], ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), _children[4], ((AdaptiveEnhancedParseTreeInnerNode)_children[5]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2], ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), _children[4], ((AdaptiveEnhancedParseTreeInnerNode)_children[5]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LabeledStmt_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_CASE" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ConstantExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ELLIPSES" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ConstantExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Colon_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Stmt_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsStmts_sv_37_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsStmts_sv_37_0(_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LabeledStmt_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Identifier_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Colon_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Attributes_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Stmt_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_53_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_53_0(_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LabeledStmt_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DEFAULT" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Colon_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Stmt_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_51_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_51_0(_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2], ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2], ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LabeledStmt_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_CASE" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ConstantExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Colon_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Stmt_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_49_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_49_0(_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LabeledStmt_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Identifier_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Colon_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Stmt_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_LogicalAndExpr_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:LogicalAndExpr_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NLogicalAndExpr_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_75_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_75_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LogicalAndExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LogicalAndExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AndOp_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_InclusiveOrExpr_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_73_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_73_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LogicalAndExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_InclusiveOrExpr_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_LogicalOrExpr_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:LogicalOrExpr_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NLogicalOrExpr_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_67_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_67_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LogicalOrExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LogicalOrExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_OrOp_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LogicalAndExpr_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_65_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_65_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LogicalOrExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LogicalAndExpr_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_MultiplicativeExpr_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:MultiplicativeExpr_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NMultiplicativeExpr_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_245_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_245_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_MultiplicativeExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_MultiplicativeExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Mod_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_CastExpr_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_242_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_242_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_MultiplicativeExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_MultiplicativeExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Divide_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_CastExpr_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_239_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_239_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_MultiplicativeExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_MultiplicativeExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Star_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_CastExpr_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_237_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_237_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_MultiplicativeExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_CastExpr_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_ParameterDeclaration_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:ParameterDeclaration_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NParameterDeclaration_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_391_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_391_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ParameterDeclaration_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DeclarationSpecifiers_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_383_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_383_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ParameterDeclaration_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DeclarationSpecifiers_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AbstractDeclarator_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_375_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_375_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ParameterDeclaration_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DeclarationSpecifiers_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Declarator_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_ParameterList_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:ParameterList_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NParameterList_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_367_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_367_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ParameterList_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ParameterList_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Comma_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ParameterDeclaration_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_363_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_363_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ParameterList_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ParameterDeclaration_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_ParameterTypeList_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:ParameterTypeList_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NParameterTypeList_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_355_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_355_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ParameterTypeList_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ParameterList_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Comma_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ELLIPSES" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_351_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_351_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ParameterTypeList_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ParameterList_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_Pointer_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Pointer_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NPointer_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_181_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_181_0(_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Pointer_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Star_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeQualifierList_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Pointer_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_178_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_178_0(_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Pointer_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Star_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Pointer_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_176_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_176_0(_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Pointer_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Star_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeQualifierList_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_174_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_174_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Pointer_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Star_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_PostfixExpr_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:PostfixExpr_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NPostfixExpr_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_304_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_304_0(_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2], _children[3], ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode(), _children[5], _children[6], common.TerminalRecord.createSpan(new Object[] {_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2], _children[3], ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode(), _children[5], _children[6]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_PostfixExpr_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeName_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LCurly_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_InitializerList_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Comma_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RCurly_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_302_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_302_0(_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2], _children[3], ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode(), _children[5], common.TerminalRecord.createSpan(new Object[] {_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2], _children[3], ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode(), _children[5]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_PostfixExpr_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeName_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LCurly_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_InitializerList_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RCurly_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_300_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_300_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_PostfixExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_PostfixExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DEC_OP" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_298_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_298_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_PostfixExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_PostfixExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_INC_OP" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_296_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_296_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_PostfixExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_PostfixExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_PTR_OP" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Identifier_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_294_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_294_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_PostfixExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_PostfixExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Dot_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Identifier_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_292_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_292_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_PostfixExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_PostfixExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_290_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_290_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_PostfixExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_PostfixExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ArgumentExprList_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_288_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_288_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_PostfixExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_PostfixExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LBracket_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Expr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RBracket_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_286_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_286_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_PostfixExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_PrimaryExpr_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_PrimaryExpr_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:PrimaryExpr_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NPrimaryExpr_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsExpr_sv_38_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsExpr_sv_38_0(_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode(), _children[5], common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode(), _children[5]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_PrimaryExpr_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_BuiltinTypesCompatible_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeName_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Comma_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeName_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsExpr_sv_36_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsExpr_sv_36_0(_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode(), _children[5], common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode(), _children[5]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_PrimaryExpr_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_BuiltinOffsetof_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeName_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Comma_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_MemberDesignator_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsExpr_sv_34_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsExpr_sv_34_0(_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode(), _children[5], common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode(), _children[5]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_PrimaryExpr_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_BuiltinVaArg_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AssignExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Comma_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeName_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsExpr_sv_32_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsExpr_sv_32_0(_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2], common.TerminalRecord.createSpan(new Object[] {_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_PrimaryExpr_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_CompoundStatement_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsImaginaryLiterals_sv_24_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsImaginaryLiterals_sv_24_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_PrimaryExpr_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_ImaginaryHexFloatConst_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsImaginaryLiterals_sv_22_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsImaginaryLiterals_sv_22_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_PrimaryExpr_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_ImaginaryFloatConstant_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_c11_P_edu_umn_cs_melt_ableC_concretesyntax_c11C11_sv_55_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.c11.PP_edu_umn_cs_melt_ableC_concretesyntax_c11C11_sv_55_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_PrimaryExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_c11_GenericSelection_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_332_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_332_0(_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2], common.TerminalRecord.createSpan(new Object[] {_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_PrimaryExpr_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Expr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_330_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_330_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_PrimaryExpr_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_CharLiteral_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_328_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_328_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_PrimaryExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StringConstant_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_326_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_326_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_PrimaryExpr_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Constant_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_324_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_324_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_PrimaryExpr_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_HexFloatConst_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_322_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_322_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_PrimaryExpr_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_FloatConstant_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_320_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_320_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_PrimaryExpr_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DecimalConstant_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_318_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_318_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_PrimaryExpr_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Identifier_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_RelationalExpr_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:RelationalExpr_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NRelationalExpr_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_123_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_123_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RelationalExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RelationalExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_GreaterThanEqual_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ShiftExpr_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_121_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_121_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RelationalExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RelationalExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LessThanEqual_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ShiftExpr_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_119_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_119_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RelationalExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RelationalExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_GreaterThan_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ShiftExpr_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_117_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_117_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RelationalExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RelationalExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LessThan_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ShiftExpr_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_115_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_115_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RelationalExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ShiftExpr_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_Root">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Root</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NRoot>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxRoot_sv_8_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxRoot_sv_8_0(common.TerminalRecord.createSpan(new Object[] {}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Root" grammar="host" /></LHS>
    <RHS></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxRoot_sv_6_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxRoot_sv_6_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Root" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TranslationUnit_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_SelectionStmt_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:SelectionStmt_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NSelectionStmt_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_75_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_75_0(_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_SelectionStmt_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_SWITCH" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Expr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Stmt_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_73_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_73_0(_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode(), _children[5], ((AdaptiveEnhancedParseTreeInnerNode)_children[6]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode(), _children[5], ((AdaptiveEnhancedParseTreeInnerNode)_children[6]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_SelectionStmt_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_IF" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Expr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Stmt_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ELSE" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Stmt_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_71_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_71_0(_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_SelectionStmt_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_IF" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Expr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Stmt_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_ShiftExpr_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:ShiftExpr_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NShiftExpr_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_133_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_133_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ShiftExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ShiftExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RIGHT_OP" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AdditiveExpr_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_131_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_131_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ShiftExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ShiftExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LEFT_OP" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AdditiveExpr_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_129_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_129_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ShiftExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AdditiveExpr_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_SpecifierQualifierList_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:SpecifierQualifierList_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NSpecifierQualifierList_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_186_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_186_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_SpecifierQualifierList_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Attributes_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_180_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_180_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_SpecifierQualifierList_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Attributes_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_SpecifierQualifierList_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_138_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_138_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_SpecifierQualifierList_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeQualifier_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_132_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_132_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_SpecifierQualifierList_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeQualifier_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_SpecifierQualifierList_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_126_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_126_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_SpecifierQualifierList_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeSpecifier_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_120_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_120_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_SpecifierQualifierList_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeSpecifier_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_SpecifierQualifierList_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_Stmt_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:Stmt_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NStmt_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsStmts_sv_45_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsStmts_sv_45_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Stmt_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Asm_Statement_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_43_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_43_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Stmt_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_JumpStmt_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_41_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_41_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Stmt_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_IterationStmt_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_39_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_39_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Stmt_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_SelectionStmt_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_37_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_37_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Stmt_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ExprStmt_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_35_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_35_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Stmt_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_CompoundStatement_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_33_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxStmt_sv_33_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Stmt_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LabeledStmt_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_StorageClassSpecifier_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:StorageClassSpecifier_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NStorageClassSpecifier_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_c11_P_edu_umn_cs_melt_ableC_concretesyntax_c11C11_sv_125_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.c11.PP_edu_umn_cs_melt_ableC_concretesyntax_c11C11_sv_125_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StorageClassSpecifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_c11_C11_Thread_local_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_173_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_173_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StorageClassSpecifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Register_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_170_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_170_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StorageClassSpecifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Auto_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_167_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_167_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StorageClassSpecifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Static_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_164_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_164_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StorageClassSpecifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Extern_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_161_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_161_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StorageClassSpecifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Typedef_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_StringConstant_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:StringConstant_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NStringConstant_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_340_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_340_0(_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StringConstant_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StringLiteral_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StringConstant_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_338_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_338_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StringConstant_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StringLiteral_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_StructDeclarationList_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:StructDeclarationList_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NStructDeclarationList_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_278_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_278_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StructDeclarationList_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StructDeclarationList_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StructDeclaration_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_276_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_276_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StructDeclarationList_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StructDeclaration_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_StructDeclaration_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:StructDeclaration_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NStructDeclaration_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_73_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_73_0(_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StructDeclaration_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Extension_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StructDeclaration_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_284_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_284_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StructDeclaration_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_SpecifierQualifierList_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StructDeclaratorList_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Semi_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_StructDeclaratorList_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:StructDeclaratorList_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NStructDeclaratorList_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_297_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_297_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StructDeclaratorList_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StructDeclaratorList_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Comma_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StructDeclarator_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_295_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_295_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StructDeclaratorList_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StructDeclarator_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_StructDeclarator_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:StructDeclarator_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NStructDeclarator_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_217_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_217_0(_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StructDeclarator_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Colon_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ConstantExpr_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Attributes_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_213_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_213_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StructDeclarator_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Declarator_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Colon_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ConstantExpr_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Attributes_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_209_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_209_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StructDeclarator_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Declarator_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Attributes_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_307_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_307_0(_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StructDeclarator_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Colon_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ConstantExpr_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_305_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_305_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StructDeclarator_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Declarator_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Colon_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ConstantExpr_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_303_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_303_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StructDeclarator_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Declarator_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_StructOrUnionSpecifier_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:StructOrUnionSpecifier_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NStructOrUnionSpecifier_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_238_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_238_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StructOrUnionSpecifier_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StructOrUnion_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LCurly_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RCurly_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_232_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_232_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2], _children[3], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2], _children[3]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StructOrUnionSpecifier_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StructOrUnion_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Identifier_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LCurly_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RCurly_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_224_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_224_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2], _children[3], ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode(), _children[5], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2], _children[3], ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode(), _children[5]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StructOrUnionSpecifier_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StructOrUnion_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Attributes_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Identifier_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LCurly_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StructDeclarationList_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RCurly_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_260_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_260_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StructOrUnionSpecifier_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StructOrUnion_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Identifier_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_254_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_254_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StructOrUnionSpecifier_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StructOrUnion_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LCurly_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StructDeclarationList_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RCurly_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_248_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_248_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2], ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), _children[4], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2], ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), _children[4]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StructOrUnionSpecifier_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StructOrUnion_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Identifier_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LCurly_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StructDeclarationList_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RCurly_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_StructOrUnion_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:StructOrUnion_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NStructOrUnion_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_union_c">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.Punion_c(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StructOrUnion_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_UNION" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_struct_c">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.Pstruct_c(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StructOrUnion_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_STRUCT" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_TranslationUnit_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:TranslationUnit_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NTranslationUnit_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxRoot_sv_17_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxRoot_sv_17_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TranslationUnit_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TranslationUnit_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ExternalDeclaration_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxRoot_sv_15_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxRoot_sv_15_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TranslationUnit_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ExternalDeclaration_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_TypeName_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:TypeName_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NTypeName_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_99_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_99_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeName_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_SpecifierQualifierList_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AbstractDeclarator_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_91_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclarations_sv_91_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeName_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_SpecifierQualifierList_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_TypeQualifierList_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:TypeQualifierList_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NTypeQualifierList_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_198_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_198_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeQualifierList_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Attributes_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_194_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_194_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeQualifierList_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Attributes_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeQualifierList_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_151_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_151_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeQualifierList_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeQualifier_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeQualifierList_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_147_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_147_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeQualifierList_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeQualifier_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_TypeQualifier_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:TypeQualifier_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NTypeQualifier_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_48_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_48_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeQualifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_UUVolatile_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_45_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_45_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeQualifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Volatile_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_42_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_42_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeQualifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_UURestrictUU_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_39_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_39_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeQualifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_UURestrict_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_36_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_36_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeQualifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_UUConst_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_c11_P_edu_umn_cs_melt_ableC_concretesyntax_c11C11_sv_110_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.c11.PP_edu_umn_cs_melt_ableC_concretesyntax_c11C11_sv_110_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeQualifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_c11_C11_Atomic_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_235_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_235_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeQualifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Restrict_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_232_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_232_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeQualifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Volatile_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_229_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_229_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeQualifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Const_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_TypeSpecifier_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:TypeSpecifier_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NTypeSpecifier_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_62_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_62_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeSpecifier_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_TypeofStarter_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Expr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_59_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_59_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeSpecifier_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_TypeofStarter_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeName_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_56_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_56_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeSpecifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Signed_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_53_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_53_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeSpecifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_UUBuiltinVAList_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_c11_P_edu_umn_cs_melt_ableC_concretesyntax_c11C11_sv_105_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.c11.PP_edu_umn_cs_melt_ableC_concretesyntax_c11C11_sv_105_0(_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeSpecifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_c11_C11_Atomic_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_c11_C11_Atomic_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeName_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_222_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_222_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeSpecifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeName_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_219_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_219_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeSpecifier_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_EnumSpecifier_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_216_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_216_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeSpecifier_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StructOrUnionSpecifier_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_213_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_213_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeSpecifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Complex_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_210_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_210_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeSpecifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Imagin_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_207_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_207_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeSpecifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Bool_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_204_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_204_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeSpecifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Unsigned_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_201_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_201_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeSpecifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Signed_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_198_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_198_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeSpecifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Double_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_195_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_195_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeSpecifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Float_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_192_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_192_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeSpecifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Long_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_189_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_189_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeSpecifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Int_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_186_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_186_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeSpecifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Short_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_183_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_183_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeSpecifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Char_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_180_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxDeclSpecifiers_sv_180_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeSpecifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Void_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_UnaryExpr_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:UnaryExpr_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NUnaryExpr_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsExpr_sv_24_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsExpr_sv_24_0(_children[0], _children[1], common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_UnaryExpr_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AndOp_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Identifier_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsExpr_sv_22_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsExpr_sv_22_0(_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_UnaryExpr_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_AlignOfUU_T" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeName_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsExpr_sv_20_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsExpr_sv_20_0(_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_UnaryExpr_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_AlignOfUU_T" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_UnaryExpr_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsExpr_sv_18_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsExpr_sv_18_0(_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_UnaryExpr_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_AlignOf_T" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeName_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsExpr_sv_16_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsExpr_sv_16_0(_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_UnaryExpr_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_AlignOf_T" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_UnaryExpr_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_c11_P_edu_umn_cs_melt_ableC_concretesyntax_c11C11_sv_147_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.c11.PP_edu_umn_cs_melt_ableC_concretesyntax_c11C11_sv_147_0(_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_UnaryExpr_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_c11_C11_Alignof_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeName_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_270_1">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_270_1(_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_UnaryExpr_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_SIZEOF" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeName_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_268_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_268_0(_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_UnaryExpr_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_SIZEOF" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_UnaryExpr_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_266_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_266_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_UnaryExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_UnaryOp_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_CastExpr_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_264_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_264_0(_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_UnaryExpr_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DEC_OP" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_UnaryExpr_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_262_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_262_0(_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_UnaryExpr_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_INC_OP" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_UnaryExpr_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_260_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_260_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_UnaryExpr_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_PostfixExpr_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_UnaryOp_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:UnaryOp_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.NUnaryOp_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsExpr_sv_28_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsExpr_sv_28_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_UnaryOp_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Extension_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsImaginaryLiterals_sv_37_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsImaginaryLiterals_sv_37_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_UnaryOp_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_UUImagUU_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsImaginaryLiterals_sv_36_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsImaginaryLiterals_sv_36_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_UnaryOp_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_UUImag_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsImaginaryLiterals_sv_35_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsImaginaryLiterals_sv_35_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_UnaryOp_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_UURealUU_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsImaginaryLiterals_sv_34_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsImaginaryLiterals_sv_34_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_UnaryOp_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_UUReal_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_281_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_281_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_UnaryOp_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Not_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_280_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_280_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_UnaryOp_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Tilde_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_279_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_279_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_UnaryOp_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Minus_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_278_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_278_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_UnaryOp_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Plus_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_277_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_277_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_UnaryOp_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Star_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_P_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_276_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.PP_edu_umn_cs_melt_ableC_concretesyntaxExpr_sv_276_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_UnaryOp_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_And_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_c11_AlignmentSpecifier_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:c11:AlignmentSpecifier_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.c11.NAlignmentSpecifier_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_c11_P_edu_umn_cs_melt_ableC_concretesyntax_c11C11_sv_41_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.c11.PP_edu_umn_cs_melt_ableC_concretesyntax_c11C11_sv_41_0(_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_c11_AlignmentSpecifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_c11_C11_AlignAs_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ConstantExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_c11_P_edu_umn_cs_melt_ableC_concretesyntax_c11C11_sv_34_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.c11.PP_edu_umn_cs_melt_ableC_concretesyntax_c11C11_sv_34_0(_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_c11_AlignmentSpecifier_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_c11_C11_AlignAs_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeName_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_c11_GenericAssocList_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:c11:GenericAssocList_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.c11.NGenericAssocList_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_c11_P_edu_umn_cs_melt_ableC_concretesyntax_c11C11_sv_77_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.c11.PP_edu_umn_cs_melt_ableC_concretesyntax_c11C11_sv_77_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_c11_GenericAssocList_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_c11_GenericAssocList_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Comma_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_c11_GenericAssoc_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_c11_P_edu_umn_cs_melt_ableC_concretesyntax_c11C11_sv_74_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.c11.PP_edu_umn_cs_melt_ableC_concretesyntax_c11C11_sv_74_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_c11_GenericAssocList_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_c11_GenericAssoc_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_c11_GenericAssoc_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:c11:GenericAssoc_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.c11.NGenericAssoc_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_c11_P_edu_umn_cs_melt_ableC_concretesyntax_c11C11_sv_86_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.c11.PP_edu_umn_cs_melt_ableC_concretesyntax_c11C11_sv_86_0(_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_c11_GenericAssoc_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DEFAULT" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Colon_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AssignExpr_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_c11_P_edu_umn_cs_melt_ableC_concretesyntax_c11C11_sv_83_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.c11.PP_edu_umn_cs_melt_ableC_concretesyntax_c11C11_sv_83_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_c11_GenericAssoc_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeName_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Colon_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AssignExpr_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_c11_GenericSelection_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:c11:GenericSelection_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.c11.NGenericSelection_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_c11_P_edu_umn_cs_melt_ableC_concretesyntax_c11C11_sv_60_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.c11.PP_edu_umn_cs_melt_ableC_concretesyntax_c11C11_sv_60_0(_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode(), _children[5], common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode(), _children[5]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_c11_GenericSelection_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_c11_C11_Generic_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_AssignExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Comma_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_c11_GenericAssocList_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_c11_StaticAssertDeclaration_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:c11:StaticAssertDeclaration_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.c11.NStaticAssertDeclaration_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_c11_P_edu_umn_cs_melt_ableC_concretesyntax_c11C11_sv_135_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.c11.PP_edu_umn_cs_melt_ableC_concretesyntax_c11C11_sv_135_0(_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode(), _children[5], _children[6], common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode(), _children[5], _children[6]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_c11_StaticAssertDeclaration_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_c11_C11_Static_assert_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ConstantExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Comma_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StringConstant_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Semi_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmArgument_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:AsmArgument_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.NAsmArgument_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_54_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_54_0(_children[0], _children[1], _children[2], _children[3], ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], _children[2], _children[3], ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmArgument_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StringLiteral_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Colon_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Colon_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Colon_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmClobbers_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_52_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_52_0(_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], _children[4], ((AdaptiveEnhancedParseTreeInnerNode)_children[5]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], _children[4], ((AdaptiveEnhancedParseTreeInnerNode)_children[5]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmArgument_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StringLiteral_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Colon_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmOperands_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Colon_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Colon_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmClobbers_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_50_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_50_0(_children[0], _children[1], _children[2], ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), _children[4], ((AdaptiveEnhancedParseTreeInnerNode)_children[5]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], _children[2], ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), _children[4], ((AdaptiveEnhancedParseTreeInnerNode)_children[5]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmArgument_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StringLiteral_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Colon_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Colon_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmOperands_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Colon_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmClobbers_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_48_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_48_0(_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode(), _children[5], ((AdaptiveEnhancedParseTreeInnerNode)_children[6]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode(), _children[5], ((AdaptiveEnhancedParseTreeInnerNode)_children[6]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmArgument_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StringLiteral_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Colon_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmOperands_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Colon_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmOperands_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Colon_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmClobbers_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_46_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_46_0(_children[0], _children[1], _children[2], common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], _children[2]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmArgument_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StringLiteral_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Colon_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Colon_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_44_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_44_0(_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmArgument_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StringLiteral_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Colon_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmOperands_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Colon_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_42_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_42_0(_children[0], _children[1], _children[2], ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], _children[2], ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmArgument_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StringLiteral_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Colon_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Colon_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmOperands_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_40_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_40_0(_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], ((AdaptiveEnhancedParseTreeInnerNode)_children[4]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmArgument_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StringLiteral_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Colon_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmOperands_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Colon_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmOperands_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_38_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_38_0(_children[0], _children[1], common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmArgument_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StringLiteral_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Colon_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_36_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_36_0(_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmArgument_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StringLiteral_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Colon_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmOperands_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_34_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_34_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmArgument_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StringLiteral_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmClobbers_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:AsmClobbers_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.NAsmClobbers_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_61_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_61_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmClobbers_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmClobbers_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Comma_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StringLiteral_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_59_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_59_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmClobbers_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StringLiteral_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmOperand_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:AsmOperand_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.NAsmOperand_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_75_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_75_0(_children[0], _children[1], _children[2], _children[3], _children[4], ((AdaptiveEnhancedParseTreeInnerNode)_children[5]).getLangSpecNode(), _children[6], common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], _children[2], _children[3], _children[4], ((AdaptiveEnhancedParseTreeInnerNode)_children[5]).getLangSpecNode(), _children[6]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmOperand_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LBracket_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Identifier_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RBracket_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StringLiteral_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Expr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_73_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_73_0(_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmOperand_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StringLiteral_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Expr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmOperands_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:AsmOperands_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.NAsmOperands_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_68_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_68_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmOperands_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmOperands_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Comma_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmOperand_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_66_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_66_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmOperands_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmOperand_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Asm_Starter_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:Asm_Starter_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.NAsm_Starter_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_29_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_29_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Asm_Starter_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_UUAsm_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_27_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_27_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Asm_Starter_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Asm_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_25_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_25_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Asm_Starter_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Asm_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Asm_Statement_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:Asm_Statement_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.NAsm_Statement_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_18_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_18_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], _children[4], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], _children[4]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Asm_Statement_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Asm_Starter_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmArgument_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Semi_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_16_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_16_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2], ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), _children[4], _children[5], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2], ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), _children[4], _children[5]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Asm_Statement_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Asm_Starter_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeQualifier_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AsmArgument_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Semi_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AttribName_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:AttribName_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.NAttribName_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsVariableAttributes_sv_55_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsVariableAttributes_sv_55_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AttribName_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StorageClassSpecifier_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsVariableAttributes_sv_53_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsVariableAttributes_sv_53_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AttribName_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeQualifier_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsVariableAttributes_sv_51_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsVariableAttributes_sv_51_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AttribName_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_TypeSpecifier_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsVariableAttributes_sv_49_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsVariableAttributes_sv_49_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AttribName_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Identifier_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Attrib_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:Attrib_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.NAttrib_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsVariableAttributes_sv_44_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsVariableAttributes_sv_44_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Attrib_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AttribName_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ArgumentExprList_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsVariableAttributes_sv_34_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsVariableAttributes_sv_34_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Attrib_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AttribName_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsVariableAttributes_sv_32_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsVariableAttributes_sv_32_0(common.TerminalRecord.createSpan(new Object[] {}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Attrib_c" grammar="host" /></LHS>
    <RHS></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AttributeList_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:AttributeList_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.NAttributeList_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsVariableAttributes_sv_27_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsVariableAttributes_sv_27_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AttributeList_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AttributeList_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Comma_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Attrib_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsVariableAttributes_sv_25_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsVariableAttributes_sv_25_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AttributeList_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Attrib_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Attribute_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:Attribute_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.NAttribute_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsVariableAttributes_sv_20_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsVariableAttributes_sv_20_0(_children[0], _children[1], _children[2], ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), _children[4], _children[5], common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], _children[2], ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), _children[4], _children[5]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Attribute_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_UUAttribute_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AttributeList_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsVariableAttributes_sv_18_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsVariableAttributes_sv_18_0(_children[0], _children[1], _children[2], ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), _children[4], _children[5], common.TerminalRecord.createSpan(new Object[] {_children[0], _children[1], _children[2], ((AdaptiveEnhancedParseTreeInnerNode)_children[3]).getLangSpecNode(), _children[4], _children[5]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Attribute_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Attribute_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_AttributeList_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Attributes_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:Attributes_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.NAttributes_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsVariableAttributes_sv_13_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsVariableAttributes_sv_13_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Attributes_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Attribute_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Attributes_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsVariableAttributes_sv_10_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsVariableAttributes_sv_10_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Attributes_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Attribute_c" grammar="host" /></RHS>
    <Operator><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Attr_LowerPrec_t" grammar="host" /></Operator>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_InitialNestedFunctionDefinition_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:InitialNestedFunctionDefinition_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.NInitialNestedFunctionDefinition_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_89_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_89_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
edu_umn_cs_melt_ableC_concretesyntax_context = ((common.ConsCell)edu.umn.cs.melt.ableC.concretesyntax.PbeginFunctionScope.invoke(((edu.umn.cs.melt.ableC.abstractsyntax.NName)((edu.umn.cs.melt.ableC.concretesyntax.NDeclarator_c)((common.Node)RESULT).getChild(edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_89_0.i_d)).decorate(context, (common.Lazy[])null).synthesized(edu.umn.cs.melt.ableC.concretesyntax.Init.edu_umn_cs_melt_ableC_concretesyntax_declaredIdent__ON__edu_umn_cs_melt_ableC_concretesyntax_Declarator_c)), ((core.NMaybe)((edu.umn.cs.melt.ableC.concretesyntax.NDeclarator_c)((common.Node)RESULT).getChild(edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_89_0.i_d)).decorate(context, (common.Lazy[])null).synthesized(edu.umn.cs.melt.ableC.concretesyntax.Init.edu_umn_cs_melt_ableC_concretesyntax_declaredParamIdents__ON__edu_umn_cs_melt_ableC_concretesyntax_Declarator_c)), edu_umn_cs_melt_ableC_concretesyntax_context));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_InitialNestedFunctionDefinition_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_DeclarationSpecifiers_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Declarator_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_LabelDeclaration_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:LabelDeclaration_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.NLabelDeclaration_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsStmts_sv_20_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsStmts_sv_20_0(_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2], common.TerminalRecord.createSpan(new Object[] {_children[0], ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), _children[2]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_LabelDeclaration_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_GNU_UULabel_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_IdentifierList_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Semi_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_LabelDeclarations_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:LabelDeclarations_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.NLabelDeclarations_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsStmts_sv_16_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsStmts_sv_16_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_LabelDeclarations_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_LabelDeclarations_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_LabelDeclaration_c" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsStmts_sv_15_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsStmts_sv_15_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_LabelDeclarations_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_LabelDeclaration_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_MemberDesignator_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:MemberDesignator_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.NMemberDesignator_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsExpr_sv_49_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsExpr_sv_49_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_MemberDesignator_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_MemberDesignator_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LBracket_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_ConstantExpr_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RBracket_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsExpr_sv_47_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsExpr_sv_47_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_MemberDesignator_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_MemberDesignator_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_PTR_OP" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Identifier_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsExpr_sv_45_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsExpr_sv_45_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], _children[2]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_MemberDesignator_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_MemberDesignator_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Dot_t" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Identifier_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsExpr_sv_43_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsExpr_sv_43_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_MemberDesignator_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_Identifier_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_NestedFunctionDefinition_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:NestedFunctionDefinition_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.NNestedFunctionDefinition_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_80_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_80_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode(), common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), ((AdaptiveEnhancedParseTreeInnerNode)_children[1]).getLangSpecNode()}, virtualLocation, (int)_pos.getPos())));
edu_umn_cs_melt_ableC_concretesyntax_context = ((common.ConsCell)edu.umn.cs.melt.ableC.concretesyntax.PcloseScope.invoke(edu_umn_cs_melt_ableC_concretesyntax_context));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_NestedFunctionDefinition_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_InitialNestedFunctionDefinition_c" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_CompoundStatement_c" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_SimpleAsmStatement_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:SimpleAsmStatement_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.NSimpleAsmStatement_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_11_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsAsmConstruct_sv_11_0(((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3], common.TerminalRecord.createSpan(new Object[] {((AdaptiveEnhancedParseTreeInnerNode)_children[0]).getLangSpecNode(), _children[1], ((AdaptiveEnhancedParseTreeInnerNode)_children[2]).getLangSpecNode(), _children[3]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_SimpleAsmStatement_c" grammar="host" /></LHS>
    <RHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Asm_Starter_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_LParen_t" grammar="host" /><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_StringConstant_c" grammar="host" /><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_RParen_t" grammar="host" /></RHS>
  </Production>

  <Nonterminal id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_TypeofStarter_c">
    <PP>edu:umn:cs:melt:ableC:concretesyntax:gcc_exts:TypeofStarter_c</PP>
    <Type><![CDATA[AdaptiveEnhancedParseTreeInnerNode<edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.NTypeofStarter_c>]]></Type>
  </Nonterminal>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_70_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_70_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_TypeofStarter_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_UUTypeof_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_69_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_69_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_TypeofStarter_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_CPP_Typeof_t" grammar="host" /></RHS>
  </Production>
  <Production id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_P_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_68_0">
    <Code><![CDATA[
      RESULT = createPTNode(new edu.umn.cs.melt.ableC.concretesyntax.gcc_exts.PP_edu_umn_cs_melt_ableC_concretesyntax_gcc_extsDeclarations_sv_68_0(_children[0], common.TerminalRecord.createSpan(new Object[] {_children[0]}, virtualLocation, (int)_pos.getPos())));
]]></Code>
    <LHS><NonterminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_TypeofStarter_c" grammar="host" /></LHS>
    <RHS><TerminalRef id="edu_umn_cs_melt_ableC_concretesyntax_gcc_exts_Typeof_t" grammar="host" /></RHS>
  </Production>
    </Declarations>
  </Grammar>
</CopperSpec>
